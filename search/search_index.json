{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome","text":"<p>Welcome, browse sections at the top of the site.</p>"},{"location":"development/","title":"Development","text":"<p>The Development section provides content covering:</p> <ul> <li>Overviews of the internal architecture and components</li> <li>Obtaining development environments</li> <li>Executing development workflows</li> <li>Feature implementation guides and examples</li> </ul>"},{"location":"development/email/","title":"Working with Email","text":""},{"location":"development/email/#catching-emails-in-development","title":"Catching emails in development","text":"<p>In the studio, you can enable relaying email to a specified SMTP endpoint.</p> <p>HELO and mailtrap are easy SMTP endpoints to set up for development that provide UIs for reviewing emails sent to all recipients. When emails are configured to be relayed to these services, they will be trapped for review and never actually delivered to anyone externally, no matter what recipients you use. As opposed to overriding recipient emails to test email features, this approach enables you to verify that personalized bulk emails send the right content to the right recipients.</p>"},{"location":"development/email/#using-helo","title":"Using HELO","text":"<ol> <li>Download and open the HELO app</li> <li>Launch studio, run <code>start-all</code></li> <li> <p>Install and activate postfix email backend:</p> <pre><code>enable-email\n</code></pre> </li> <li> <p>Configure postfix email backend to relay to HELO app on Docker host machine:</p> <pre><code>enable-email-relay host.docker.internal 2525 studio\n</code></pre> <p>Or, using mailtrap:</p> <pre><code>enable-email-relay smtp.mailtrap.io 2525 mailtrapusername mailtrappassword\n</code></pre> </li> </ol>"},{"location":"development/email/#sending-a-test-email","title":"Sending a test email","text":"<p>From the studio:</p> <ol> <li> <p>Install netcat:</p> <pre><code>hab pkg install --binlink core/netcat\n</code></pre> </li> <li> <p>Open SMTP connection:</p> <pre><code>nc localhost 25\n</code></pre> </li> <li> <p>Start SMTP session:</p> <pre><code>EHLO localhost.localdomain\n</code></pre> </li> <li> <p>Set sender:</p> <pre><code>MAIL FROM: &lt;sender@example.com&gt;\n</code></pre> </li> <li> <p>Set recipient:</p> <pre><code>RCPT TO: &lt;recipient@example.com&gt;\n</code></pre> </li> <li> <p>Set message:</p> <pre><code>DATA\nSubject: Hello world!\n\nThis is the body of my email.\n\nHave a good day.\n\n.\n</code></pre> </li> <li> <p>Close SMTP session:</p> <pre><code>QUIT\n</code></pre> </li> <li> <p>Review postfix backend log:</p> <pre><code>less -S /hab/cache/sys.log\n</code></pre> </li> </ol>"},{"location":"development/migrations/","title":"Developing Migrations","text":"<p>Within the development studio:</p> <ol> <li>Create a new file under <code>php-migrations/</code></li> <li> <p>Load modified working tree into runtime:</p> <pre><code>update-site\n</code></pre> </li> <li> <p>Execute all migrations:</p> <pre><code>console-run migrations:execute --all\n</code></pre> </li> <li> <p>(Re)Execute a specific migration:</p> <pre><code>console-run migrations:execute --force \"Emergence/People/20191209_system-user\"\n</code></pre> </li> </ol>"},{"location":"development/data-models/cbl/","title":"CBL Data Model","text":""},{"location":"development/data-models/cbl/#ratings","title":"Ratings","text":"<p>Ratings are input as children of <code>Demonstration</code> records. Each <code>Demonstration</code> can have any number of associated ratings, each associated with exactly one <code>Skill</code>. Accordingly, each rating is stored within a <code>DemonstrationSkill</code> record.</p> <p><code>mermaid erDiagram     Demonstration ||--o{ DemonstrationSkill : contains     Demonstration {         int StudentID         date Demonstrated         string ArtifactURL     }     DemonstrationSkill }o..|| Skill : \"rated against\"     DemonstrationSkill {         int TargetLevel \"Portfolio level rating is against\"         int Rating         bool Override     }     Skill {         int CompetencyID         string Code         string Statement     }</code></p>"},{"location":"development/data-models/cbl/#portfolios","title":"Portfolios","text":"<p>A portfolio exists at the intersection of a <code>Student</code>, a <code>Competency</code>, and a <code>Level</code>, and is backed in database by a <code>StudentCompetency</code> record. A student is enrolled in a given competency at a given porfolio level by creating one of these records. They can either be created manually by school administrators, or automatically by policy upon the completion of a previous portfolio within the same competency. A <code>StudentCompetency</code> record may also capture a predetermined baseline performance level for purposes of calculating growth.</p> <p>Progress, performance level, and growth for a give portfolio are calculated based on all the ratings within all a student\u2019s demonstrations that target the portfolio level and a skill within the competency.</p> <p>```mermaid erDiagram     Student ||\u2013o{ StudentCompetency : \u201cenrolled in\u201d</p> <pre><code>StudentCompetency {\n    int CompetencyID\nint Level \"Portfolio level (e.g. 9-12)\"\ndecimal BaselineRating \"(optional) Predetermined baseline rating for portfolio\"\ncalculated progress \"Current percentage of evidence requirements completed\"\ncalculated demonstrationsAverage \"Current performance level across counted demonstrations\"\ncalculated baselineAverage \"The saved BaselineRating, or a current calculated baseline\"\ncalculated growth \"Current increase in performance from the baseline\"\n}\n\nCompetency ||..|{ Skill : contains\nCompetency {\n\n}\nSkill {\n    int CompetencyID\nstring Code\nstring Statement\n}\n\nStudentCompetency ||--o{ DemonstrationSkill : \"contains\"\nDemonstrationSkill {\n    int SkillID \"Matched to StudentCompetency.CompetencyID\"\nint TargetLevel \"Matched to StudentCompetency.Level\"\nint Rating\nbool Override\n}\n</code></pre> <p>```</p>"},{"location":"development/data-models/cbl/#progress-and-performance-level","title":"Progress and performance level","text":"<p>The following table shows an example set of ratings that might be available for a given <code>StudentCompetency</code> record, where the <code>ER1</code>\u2026<code>ER4</code> columns illustrate that these skills all have an evidence requirement of 4 ratings:</p> Skill ER1 ER2 ER3 ER4 <code>ELA.1.1</code> 9 11 <code>ELA.1.2</code> 9 11 <code>ELA.1.3</code> 9 11 <p>In this simple scenario, performance level is <code>9</code> and progress is <code>50%</code>.</p>"},{"location":"development/filesystem-api/","title":"Filesystem API","text":"<p>This section documents the <code>emergence-site-v1</code> filesystem API.</p> <p>The filesystem API consists of a declared set of standard root filesystem tree names for a site. Each standard root is associated with a definition of how files within should be named and structured, and how the site should incorporate the contents of the tree into its behavior.</p>"},{"location":"development/filesystem-api/api-docs/","title":"api-docs","text":"<p>The <code>api-docs</code> root serves to render a complete OpenAPI specification for the site. Within, the components of an OpenAPI specification are spread out over a tree structure to best enable overlaying projects to precisely override/extend API documentation.</p>"},{"location":"development/filesystem-api/console-commands/","title":"console-commands","text":"<p>The <code>console-commands</code> root provides command-line console commands that developers can run in the context of the site. These can also be useful in DevOps automations that use shell scripting to orchestrate operations and to provide integration points for external shell-based systems.</p>"},{"location":"development/filesystem-api/cypress/","title":"cypress","text":"<p>The <code>cypress</code> root contains end-to-end testing assets for the Cypress browser testing framework. It follows the same structure that Cypress\u2019 command-line tooling will generate in a project repository by default.</p> <p>See Cypress\u2019 Folder Structure documentation for details on the semantics of content within this tree.</p>"},{"location":"development/filesystem-api/data-exporters/","title":"data-exporters","text":"<p>The <code>data-exporters</code> tree provides endpoints for querying potentially-dynamic data from the site and processing it record-by-record.</p> <p>The <code>/exports</code> web interface provides a menu of available data exporters with query forms and output to streaming CSV.</p> <p>Data warehouse exporters are available as well that can declaratively map output sets and attributes to external PostgreSQL tables and columns.</p>"},{"location":"development/filesystem-api/docs/","title":"docs","text":"<p>The <code>docs</code> root contains documentation content for the project in Markdown format, commonly compiled with MkDocs into a static website.</p> <p>Sites can add files to this tree with any path and name to create arbitrary articles, but the following convention is recommended for typical documentation:</p> <ul> <li><code>getting-started/</code>: initial setup for a new system</li> <li><code>usage/</code>: content for users of the system</li> <li><code>development/</code>: content for developers making changes to the system</li> <li><code>operations/</code>: content for systems administrators maintaining the system</li> </ul>"},{"location":"development/filesystem-api/dwoo-plugins/","title":"dwoo-plugins","text":"<p>The <code>dwoo-plugins</code> root provides a way to extend the Dwoo templating language with new functions/plugins that can be called from within any template.</p> <p>Placing a file under this directory is enough to register a new plugin and make it usable, with the filename serving as the function name you can invoke the plugin with inside templates.</p>"},{"location":"development/filesystem-api/event-handlers/","title":"event-handlers","text":""},{"location":"development/getting-started/cbl-webapps/","title":"CBL webapps","text":""},{"location":"development/getting-started/cbl-webapps/#running-live-changes","title":"Running live changes","text":"<p>Each frontend Sencha application needs to be built at least once with the Sencha CMD build tool to scaffold/update a set of loader files. After that, you can just edit files the working tree and reload the browser. The two exceptions where you need to build again are changing the list of packages or changing the list of override files.</p> <p>There is a shortcut studio command for building each frontend application:</p> <ul> <li><code>build-enroll-admin</code></li> <li><code>build-demos-teacher</code></li> <li><code>build-demos-student</code></li> <li><code>build-tasks-manager</code></li> <li><code>build-tasks-teacher</code></li> <li><code>build-tasks-student</code></li> </ul> <p>Once built, the live-editable version of each app can be accessed via the static web server that the studio runs on port <code>2191</code>. The backend host must be provided to the apps via the <code>?apiHost</code> query parameter. Any remote backend with CORS enabled will work, or you can use the local backend:</p> <ul> <li><code>localhost:2191/SlateStudentCompetenciesAdmin/?apiHost=localhost:2190</code></li> <li><code>localhost:2191/SlateDemonstrationsTeacher/?apiHost=localhost:2190</code></li> <li><code>localhost:2191/SlateDemonstrationsStudent/?apiHost=localhost:2190</code></li> <li><code>localhost:2191/SlateTasksManager/?apiHost=localhost:2190</code></li> <li><code>localhost:2191/SlateTasksTeacher/?apiHost=localhost:2190</code></li> <li><code>localhost:2191/SlateTasksStudent/?apiHost=localhost:2190</code></li> </ul>"},{"location":"development/getting-started/cbl-webapps/#working-with-breakpoints","title":"Working with breakpoints","text":"<p>By default, the Sencha framework will automatically append random cache buster values to every loaded <code>.js</code> source. This helps ensures that your latest code always runs, but will also prevent any breakpoints you set from persisting across reloads.</p> <p>With the Disable cache option of the network inspector activated, you can disable this built-in cache buster by appending <code>&amp;cache=1</code> to the current page\u2019s query string.</p>"},{"location":"development/getting-started/cbl-webapps/#connecting-to-remote-server","title":"Connecting to remote server","text":"<p>You can connect to any remote slate-cbl instance that has CORS enabled by appending the query parameter <code>apiHost</code> when loading the page. If the remote instance requires HTTPS, append <code>apiSSL=1</code> as well.</p>"},{"location":"development/running-tests/e2e/","title":"End-to-end (E2E) testing","text":"<p>Cypress is used to provide browser-level full-stack testing.</p> <p>In this project, Cypress gets run within the <code>cypress-workspace</code> holobranch defined at <code>.holo/branch/cypress-workspace/**</code> within the project repository. This allows local test suite additions and overrides to be stacked on top of those provided by parent projects. The base implemenation is published from <code>emergence-skeleton</code> and your local project may have any number of parent projects stacked in between, so there can be many layers contributing to the below content structure.</p> <p>The <code>cypress-workspace</code> holobranch typically copies the following overrides from the local project repository:</p> <ul> <li><code>cypress.json</code>: top-level project configuration for cypress</li> <li><code>cypress/integrations/**/*.js</code>: additional or overridden test suites</li> <li><code>cypress/integrations/**/*.json</code>: additional or overridden test suite configurations (provides some flexibility for test suites to support different downstream reskinnings without all their code needing to be duplicated and overridden)</li> <li><code>cypress/fixtures/**</code>: static content test suites can make use of</li> </ul> <p>Less commonly, the following files might also be copied from the local project repository to override the Cypress setup in more depth:</p> <ul> <li><code>cypress/support/index.js</code>: Cypress plugins and additional commands get loaded here for all test suites</li> <li><code>package.json</code>/<code>package-lock.json</code>: Tracks the Cypress version and those of installed plugin packages</li> </ul> <p>Try to avoid having copies of these in local project repositories:</p> <ul> <li><code>cypress/support/commands.js</code>: Base set of additional commands that test suites can rely on. Instead of overridding this file, add additional project-specific commands to some new files under <code>cypress/support</code> and override <code>cypress/support/index.js</code> to load them</li> <li><code>cypress/plugins/index.js</code>: Base set of automatic environment setup logic</li> </ul>"},{"location":"development/running-tests/e2e/#run-tests-quickly","title":"Run tests quickly","text":"<p>To quickly run the full test suite headlessly, run on the local terminal outside the studio in the root of your local project repository:</p> <pre><code>script/test\n</code></pre>"},{"location":"development/running-tests/e2e/#run-tests-interactively","title":"Run tests interactively","text":"<p>To run tests with Cypress\u2019 interactive GUI open, run on the local terminal outside the studio in the root of your local project repository:</p> <pre><code>script/test-interactive\n</code></pre> <p>This script uses <code>unionfs-fuse</code> to set up a virtual directory mount on your workstation\u2019s filesystem to run Cypress out of. This union mount provides a live workspace where your local project workspace is merged on top of the base set of <code>cypress-workspace</code> content pulled from your parent project.</p> <p>This virtual directory mount gets set up at <code>${path_to_your_repo}.cypress-workspace/merged</code> and Cypress gets run from there.</p> <ul> <li>Changes you save to Cypress content in your local project work tree will immediately be reflected in the <code>merged</code> mount<ul> <li>The filesystem events needed to drive auto-reload may not work</li> <li>Exit the Cypress GUI and reload it to thoroughly force your latest content to be used</li> </ul> </li> <li>Changes you save to Cypress content in your local <code>merged</code> mount will immediately be reflected back to your local project work tree</li> <li>If parent project content changes / you\u2019ve edited a source config, exit the Cypress GUI and re-run <code>script/test-interactive</code> to restart in a fresh environment</li> </ul> <p>Making Cypress auto-reload as you save changes</p> <p>Because filesystem change events from your local project work tree to the merged unionfs that Cypress runs out of don\u2019t always work, work on Cypress tests out of the <code>merged</code> mount instead.</p> <p>Any changes you make will immediately be written to to your local project work tree ready to stage into a git commit, and filesystem change events will fire live for Cypress to auto-reload test suites as you work.</p> <p>The Open in IDE button that Cypress\u2019 main window will how you as you hover over tests in the list can be used to open the copy of the file in the <code>merged</code> mount where changes will trigger auto-reload.</p> <p>Prevent VSCode from opening virtual repository</p> <p>By default, Visual Studio Code will automatically detect and open the \u201cmerged\u201d git repository produced by the unionfs with its built-in git integration. This makes it difficult to close out the testing environment as VSCode will keep many active processes accessing the git repository once it has been opened, even after you manually close it.</p> <p>To prevent Visual Studio Code from automatically opening this union repository and causing all sorts of mahem, open your user <code>settings.json</code> and add an option to ignore the <code>*.cypress-workspace/merged</code> repository at whatever path your project repository lives at:</p> <pre><code>{\n// ...\n\"git.ignoredRepositories\": [\n\"/Users/me/Repositories/git@github.com:SlateFoundation/slate-cbl.git.cypress-workspace/merged\"\n]\n}\n</code></pre>"},{"location":"development/running-tests/e2e/#testing-against-a-remote-server","title":"Testing against a remote server","text":"<p>By setting environment variables before launching the Cypress GUI, the E2E test suite can be configured to execute against a backend studio hosted on a remote machine or server.</p> <p>On the local terminal outside the studio in the root of your local project repository:</p> <ol> <li> <p>Set base URL to studo HTTP root reachable from local workstation:</p> <pre><code>export CYPRESS_BASE_URL='http://workstation.mydomain:2190'\n</code></pre> </li> <li> <p>Configure the SSH host that the backend studio is running on:</p> <pre><code>export CYPRESS_STUDIO_SSH='workstation.mydomain'\n</code></pre> <p>Your local terminal must be set up to connect to it without password.</p> </li> <li> <p>Configure the name of the Docker container running the backend studio:</p> <pre><code>export CYPRESS_STUDIO_CONTAINER='slate-cbl-studio'\n</code></pre> </li> <li> <p>Launch the Cypress GUI:</p> <pre><code>script/test-interactive\n</code></pre> </li> </ol>"},{"location":"development/running-tests/e2e/#checking-for-race-conditions","title":"Checking for race conditions","text":"<p>Cypress\u2019 default timeout limits for UI assertions and XHR assertions vary greatly: 4 seconds for UI assertions and 30 seconds for XHR assertions. This disparity is a leading cause of apparent instability in Cypress tests where a test will pass locally consistently but fail in CI consistency.</p> <p>What causes this to happen is having UI assertions within your tests that won\u2019t pass if some XHR call leading up to them takes more than 4 seconds, which is more likely to happen occasionally on \u201ccold\u201d instances like CI runs always are. The solution to this is relatively simple: add a <code>cy.wait('@xhrInterceptName')</code> assertion ahead of any UI assertion that won\u2019t pass until that XHR call finishes. This ensures that the test script waits for XHR calls to finish under the longer timeout they have by default, and gives you more helpful errors when a failure happens at that level.</p> <p>It can be easy to miss these spots while you\u2019re developing tests. One step is to look through your test logs for all XHR calls (they\u2019ll show up in the actions log timeline whether you intercept or wait for them or not) and consider if any of the UI assertions surrounding it depend on it finishing first. Another approach is to introduce an artificial delay to all XHR calls on your local server, forcing them all to take longer than the default UI assertion timeout of 4 seconds:</p> <pre><code>&lt;?php\n// save to php-config/Site.config.d/delay-execute.php\n\nSite::$onBeforeScriptExecute = function() {\n    sleep(5);\n};\n</code></pre> <p>With this change loaded up into your local studio, every request that isn\u2019t a static asset request will gain a 5 second delay upfront\u2014forcing every UI assertion in your test that accidentally depends on an XHR call finishing in less than 4 seconds to fail. Spend one round after you finish your new Cypress tests checking them with this activated, and you can gain a lot of confidence it will work as consistently in CI as it does locally. Just be sure to discard this change when you\u2019re done and avoid committing it with your work\u2014or add it to your local <code>.git/info/exclude</code> to keep it around entirely ignored by Git while you do your work.</p>"},{"location":"development/running-tests/fixtures/","title":"Adding fixture data","text":"<p>You can use this workflow for identifying and capturing fixture changes: - load existing fixture data by running <code>load-fixtures</code> at the studio command prompt - Take a complete snapshot of the database <code>dump-sql &gt; .scratch/snapshot.before-changes.sql</code> - Create new records using the UI - Take a complete snapshot <code>dump-sql &gt; .scratch/snapshot.after-changes.sql</code> - Open up the two .sql files in a visual diff viewer and manually transplant the added records over to their appropriate fixture files in the repo</p>"},{"location":"development/workplace-setup/task-manager/","title":"Task Manager (Task Library) webapp","text":""},{"location":"development/workplace-setup/task-manager/#code-layout","title":"Code layout","text":"<ul> <li><code>php-classes/</code><ul> <li><code>Slate/</code><ul> <li><code>CBL/</code><ul> <li><code>Tasks/</code><ul> <li><code>TasksRequestHandler.php</code>: Request handler for XHR requests made from task manager UI</li> <li><code>Task.php</code>: Active record object that represents Tasks and implements CRUD operations and sorting</li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> <li><code>sencha-workspace/</code><ul> <li><code>SlateTasksManager</code><ul> <li><code>app</code><ul> <li><code>controller</code><ul> <li><code>Tasks.js</code> : The Tasks controller manages the Task Library UI and implements methods that allow user to browse, create, and edit tasks</li> </ul> </li> <li><code>store</code><ul> <li><code>Tasks.js</code> : The Tasks store serves a repository for task data retreived from the server.</li> </ul> </li> <li><code>view</code><ul> <li><code>Viewport.js</code> :  A simple frame for the taskmanager app that allows it to fit correctly into the Slate frame.</li> <li><code>Viewport.scss</code> : CSS classes that specify the positioning of the app and the Slate omni bar.</li> <li><code>TaskManager.js</code>: A frame that fits in the Viewport and specifies a border layout for the app header, task grid and details pane.</li> <li><code>TaskManager.scss</code> : A single css class that prevents clipping of the icon on refresh button on the bottom toolbar</li> <li><code>AppHeader.js</code> : The app header contains the \u201cTask Library\u201d title and the add/modify/delete buttons</li> <li><code>TaskDetails.js</code> : The side panel that shows the details of tasks selected in the task grid.</li> <li><code>TaskDetails.css</code> : CSS classes that affect the positioning and style of the details pane within the task manager layout</li> <li><code>TaskGrid.js</code> : The Task grid that displays tasks and allows for sorting, filtering and paging.</li> </ul> </li> </ul> </li> </ul> </li> <li><code>packages/</code><ul> <li><code>slate-cbl/</code><ul> <li><code>src</code><ul> <li><code>view</code><ul> <li><code>tasks</code><ul> <li><code>TaskForm</code> : Shareable form for the creating and editing of tasks.</li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> </ul>"},{"location":"development/workplace-setup/task-manager/#ui-layout","title":"UI Layout","text":"<pre><code>---------------------------------------------\n|                                           |\n|   App Header                              |\n|                                           |\n|-------------------------------------------\n|                          |                |\n|                          |                |\n|   Task Grid              |  Task Details  |\n|                          |                |\n|                          |                |\n---------------------------------------------\n</code></pre>"},{"location":"development/workplace-setup/task-manager/#running-live-changes","title":"Running live changes","text":"<p>The frontend Sencha application needs to be built at least once with the Sencha CMD build tool to scaffold/update a set of loader files. After that, you can just edit files the working tree and reload the browser. The two exceptions where you need to build again are changing the list of packages or changing the list of override files.</p> <p>Before the frontend application can be built to run from live changes, you\u2019ll need to ensure all submodules are initialized:</p> <pre><code>git submodule update --init\n</code></pre> <p>To build the frontend application use the shortcut studio command</p> <pre><code>build-tasks-manager\n</code></pre> <p>Once built, the live-editable version of the app can be accessed via the static web server that the studio runs on port <code>2191</code>. The backend host must be provided to the apps via the <code>?apiHost</code> query parameter. Any remote backend with CORS enabled will work, or you can use the local backend:</p> <p><code>localhost:2191/SlateTasksManager/?apiHost=localhost:2190</code></p>"},{"location":"development/workplace-setup/task-manager/#working-with-breakpoints","title":"Working with breakpoints","text":"<p>By default, the Sencha framework will automatically append random cache buster values to every loaded <code>.js</code> source. This helps ensures that your latest code always runs, but will also prevent any breakpoints you set from persisting across reloads.</p> <p>With the Disable cache option of the network inspector activated, you can disable this built-in cache buster by appending <code>&amp;cache=1</code> to the current page\u2019s query string.</p>"},{"location":"development/workplace-setup/task-manager/#connecting-to-remote-server","title":"Connecting to remote server","text":"<p>You can connect to any remote instance that has CORS enabled by appending a query parameter in the format <code>?apiHost=https://slate.example.org</code> when loading the page. A session token may be provided via another query string in the format <code>&amp;apiToken=abcdef1234567890</code></p>"},{"location":"development/workspace-setup/content-editor/","title":"Content Editor webapp","text":""},{"location":"development/workspace-setup/content-editor/#code-layout","title":"Code layout","text":"<ul> <li><code>sencha-workspace/</code><ul> <li><code>packages/</code><ul> <li><code>emergence-cms/</code>: Primary location for content editor UI code</li> <li><code>emr-skeleton-theme/</code>: The Sencha theme used when rendering the content editor</li> </ul> </li> <li><code>EmergenceContentEditor/</code>: A thin Sencha application used to make development easier and to provide a build target for generating the theme</li> </ul> </li> <li><code>html-templates/</code><ul> <li><code>webapps/EmergenceContentEditor/sencha.tpl</code>: A template for rendering the content editor embedded in the site\u2019s design frame</li> <li><code>html-templates/blog/blogPostEdit.tpl</code>: A wrapper around <code>sencha.tpl</code> to provide the content editor UI on the blog post edit form</li> <li><code>html-templates/pages/pageEdit.tpl</code>: A wrapper around <code>sencha.tpl</code> to provide the content editor UI on the page edit form</li> </ul> </li> </ul>"},{"location":"development/workspace-setup/content-editor/#running-live-changes","title":"Running live changes","text":"<p>The frontend Sencha application needs to be built at least once with the Sencha CMD build tool to scaffold/update a set of loader files. After that, you can just edit files the working tree and reload the browser. The two exceptions where you need to build again are changing the list of packages or changing the list of override files.</p> <p>Before the frontend application can be built to run from live changes, you\u2019ll need to ensure all submodules are initialized:</p> <pre><code>git submodule update --init\n</code></pre> <p>Then, use the shortcut studio command for building the frontend application:</p> <pre><code>build-content-editor\n</code></pre> <p>Once built, the live-editable version of the app can be accessed via the static web server that the studio runs on port <code>2191</code>. The backend host must be provided to the apps via the <code>?apiHost</code> query parameter. Any remote backend with CORS enabled will work, or you can use the local backend:</p> <p><code>localhost:2191/EmergenceContentEditor/?apiHost=localhost:2190</code></p>"},{"location":"development/workspace-setup/content-editor/#working-with-breakpoints","title":"Working with breakpoints","text":"<p>By default, the Sencha framework will automatically append random cache buster values to every loaded <code>.js</code> source. This helps ensures that your latest code always runs, but will also prevent any breakpoints you set from persisting across reloads.</p> <p>With the Disable cache option of the network inspector activated, you can disable this built-in cache buster by appending <code>&amp;cache=1</code> to the current page\u2019s query string.</p>"},{"location":"development/workspace-setup/content-editor/#connecting-to-remote-server","title":"Connecting to remote server","text":"<p>You can connect to any remote instance that has CORS enabled by appending the query parameter <code>apiHost</code> when loading the page. If the remote instance requires HTTPS, append <code>apiSSL=1</code> as well.</p>"},{"location":"development/workspace-setup/local-studio/","title":"Local Studio Container","text":"<p>This guide will walk you through launching a Docker-container local development studio and using it to test changes made within a local Git repository.</p>"},{"location":"development/workspace-setup/local-studio/#launch-studio-container","title":"Launch studio container","text":"<ol> <li> <p>Install Chef Habitat:</p> <pre><code>curl -s https://raw.githubusercontent.com/habitat-sh/habitat/master/components/hab/install.sh | sudo bash\n</code></pre> </li> <li> <p>Set up Chef Habitat, accepting defaults for all prompts:</p> <pre><code>hab setup\n</code></pre> </li> <li> <p>Clone <code>slate-cbl</code> repository and any submodules:</p> <pre><code>git clone --recursive git@github.com:SlateFoundation/slate-cbl.git\n</code></pre> </li> <li> <p>Change into cloned directory:</p> <pre><code>cd ./slate-cbl\n</code></pre> </li> <li> <p>Launch studio:</p> <p>Use the included scripts-to-rules-them-all workflow script to configure and launch a studio session:</p> <pre><code>script/studio\n</code></pre> <p>Review the notes printed to your terminal at the end of the studio startup process for a list of all available studio commands.</p> </li> </ol>"},{"location":"development/workspace-setup/local-studio/#bootstrap-and-develop-backend","title":"Bootstrap and develop backend","text":"<ol> <li> <p>Start services:</p> <p>Use the studio command <code>start-all</code> to launch the http server (nginx), the application runtime (php-fpm), and a local mysql server:</p> <pre><code>start-all\n</code></pre> <p>At this point, you should be able to open localhost:2190 and see the error message <code>Page not found</code>.</p> </li> <li> <p>Build site:</p> <p>To build the entire site and load it, use the studio command <code>update-site</code>:</p> <pre><code>update-site\n</code></pre> <p>At this point, localhost:2190 should display the current build of the site</p> </li> <li> <p>Load fixture data into site database (optional):</p> <pre><code>load-fixtures\n</code></pre> <p>The standard fixture data includes the following users:</p> Username Password AccountLevel About <code>system</code> <code>system</code> <code>Developer</code> Full system access <code>admin</code> <code>admin</code> <code>Administrator</code> Manage site and staff <code>teacher</code> <code>teacher</code> <code>Staff</code> Staff access with teaching role in multiple courses sections <code>teacher2</code> <code>teacher2</code> <code>Staff</code> Staff access with teaching role in multiple course sections <code>student</code> <code>student</code> <code>User</code> Student user with student role in multiple course sections <code>student2</code> <code>student2</code> <code>User</code> Student user with student role in multiple course sections <code>student3</code> <code>student3</code> <code>User</code> Student user with no roles in any course sections </li> <li> <p>Make and apply changes:</p> <p>After editing code in the working tree, you must rebuild and update the site:</p> <pre><code>update-site\n</code></pre> <p>A command to automatically rebuild and update the site as changes are made to the working tree is also available, but currently not that efficient or reliable:</p> <pre><code>watch-site\n</code></pre> </li> </ol>"},{"location":"development/workspace-setup/local-studio/#enable-user-registration","title":"Enable user registration","text":"<p>To enable user registration on a site that comes with it disabled:</p> <pre><code># write class configuring enabling registration\nmkdir -p php-config/Emergence/People\necho '&lt;?php Emergence\\People\\RegistrationRequestHandler::$enableRegistration = true;' &gt; php-config/Emergence/People/RegistrationRequestHandler.config.php\n\n# rebuild environment\nupdate-site\n</code></pre> <p>After visiting <code>/register</code> and creating a new user account, you can use the studio command <code>promote-user</code> to upgrade the user account you just registered to the highest access level:</p> <pre><code>promote-user &lt;myuser&gt;\n</code></pre>"},{"location":"development/workspace-setup/local-studio/#connect-to-local-database","title":"Connect to local database","text":"<p>The studio container hosts a local MySQL instance that can be connected to at:</p> <ul> <li>Host: <code>localhost</code> (or LAN/WAN IP of machine hosting Docker engine)</li> <li>Port: <code>2196</code></li> <li>Username: <code>admin</code></li> <li>Password: <code>admin</code></li> </ul>"},{"location":"development/workspace-setup/slate-admin/","title":"SlateAdmin webapp","text":""},{"location":"development/workspace-setup/slate-admin/#code-layout","title":"Code layout","text":"<ul> <li><code>html-templates/</code><ul> <li><code>webapps/SlateAdmin/sencha.tpl</code>: Configuration wrapper for the template that renders the SlateApp when accessed through the site</li> </ul> </li> <li><code>php-classes/</code><ul> <li><code>SlateAdmin/</code><ul> <li><code>RequestHandler.php</code>: Wrapper that handles authenticating access to SlateAdmin webapp and the loading it</li> <li><code>WebApp.php</code>: Wrapper SlateAdmin webapp instance that hosts site-level configuration</li> </ul> </li> </ul> </li> <li><code>php-config/</code><ul> <li><code>Emergence/</code><ul> <li><code>WebApps/</code><ul> <li><code>App.config.d/</code><ul> <li><code>SlateAdmin.php</code>: Registers the SlateAdmin webapp\u2019s custom PHP WebApp wrapper class for its name so that accessing it through <code>/webapps/SlateAdmin</code> will be loaded with the subclass (and the config it hosts)</li> </ul> </li> </ul> </li> </ul> </li> <li><code>SlateAdmin/</code><ul> <li><code>WebApp.config.d/</code><ul> <li><code>*.php</code>: Downstream projects can place config snippets here that, for example, register plugins</li> </ul> </li> </ul> </li> </ul> </li> <li><code>sencha-workspace/</code><ul> <li><code>packages/</code><ul> <li><code>slate-core-data/</code>: Shareable model/store/proxy/sorter classes for the Slate namespace</li> <li><code>slate-theme/</code>: Shareable theme for Slate apps using the classic UI toolkit</li> <li><code>slate-ui-classic/</code>: Shareable UI components for apps using the classic UI toolkit</li> </ul> </li> <li><code>SlateAdmin/</code>: Entrypoint and all app-specific assets for the SlateAdmin webapp, hosted at <code>/manage</code> on Slate instances</li> </ul> </li> <li><code>site-root/</code><ul> <li><code>manage.php</code>: Route that maps <code>/manage</code> to RequestHandler</li> </ul> </li> </ul>"},{"location":"development/workspace-setup/slate-admin/#running-live-changes","title":"Running live changes","text":"<p>The frontend Sencha application needs to be built at least once with the Sencha CMD build tool to scaffold/update a set of loader files. After that, you can just edit files the working tree and reload the browser. The two exceptions where you need to build again are changing the list of packages or changing the list of override files.</p> <p>Before the frontend application can be built to run from live changes, you\u2019ll need to ensure all submodules are initialized:</p> <pre><code>git submodule update --init\n</code></pre> <p>Then, use the shortcut studio command for building the frontend application:</p> <pre><code>build-admin\n</code></pre> <p>Once built, the live-editable version of the app can be accessed via the static web server that the studio runs on port <code>2191</code>. The backend host must be provided to the apps via the <code>?apiHost</code> query parameter. Any remote backend with CORS enabled will work, or you can use the local backend:</p> <p><code>localhost:2191/SlateAdmin/?apiHost=localhost:2190</code></p>"},{"location":"development/workspace-setup/slate-admin/#working-with-breakpoints","title":"Working with breakpoints","text":"<p>By default, the Sencha framework will automatically append random cache buster values to every loaded <code>.js</code> source. This helps ensures that your latest code always runs, but will also prevent any breakpoints you set from persisting across reloads.</p> <p>With the Disable cache option of the network inspector activated, you can disable this built-in cache buster by appending <code>&amp;cache=1</code> to the current page\u2019s query string.</p>"},{"location":"development/workspace-setup/slate-admin/#connecting-to-remote-server","title":"Connecting to remote server","text":"<p>You can connect to any remote instance that has CORS enabled by appending a query parameter in the format <code>?apiHost=https://slate.example.org</code> when loading the page. A session token may be provided via another query string in the format <code>&amp;apiToken=abcdef1234567890</code></p>"},{"location":"development/workspace-setup/virtual-multisite/","title":"Virtual Multi-site Container","text":""},{"location":"development/workspace-setup/virtual-multisite/#launch-virtual-multisite-container","title":"Launch virtual multisite container","text":"<pre><code>docker run \\\n--name emergence \\\n-v emergence:/emergence \\\n-p 80:80 \\\n-p 3306:3306 \\\n-p 9083:9083 \\\njarvus/emergence\n</code></pre>"},{"location":"getting-started/","title":"Getting Started","text":"<p>The Getting Started section provides content covering:</p> <ul> <li>Overviews of the system</li> <li>Obtaining a running instance of the system</li> <li>Configuring a new system for an organization</li> <li>Onboarding new users into the system</li> </ul>"},{"location":"legacy-docs/","title":"Legacy Docs","text":"<p>This section captures legacy documentation that needs to be refactored into the new documentation hierarchy.</p>"},{"location":"legacy-docs/GLOSSARY/","title":"Glossary","text":""},{"location":"legacy-docs/GLOSSARY/#global-concepts","title":"Global Concepts","text":""},{"location":"legacy-docs/GLOSSARY/#content-area","title":"Content Area","text":"<ul> <li>The highest level of organization in the hierarchy</li> <li>Content areas can be thought of as traditional subject areas like English, Math, or Science as well as skill categories such as Leadership, Interpersonal Communication, or Habits of Success</li> </ul>"},{"location":"legacy-docs/GLOSSARY/#competency","title":"Competency","text":"<ul> <li>The level in the hierarchy below Content Area but above Standard</li> <li>This bucket organizes the standards below it into groups and categories for easier navigation, access and reporting</li> </ul>"},{"location":"legacy-docs/GLOSSARY/#standard-aka-skill","title":"Standard (aka Skill)","text":"<ul> <li>The lowest level of the hierarchy below Competency</li> <li>They represent the specific, granular skills that are tracked in the students\u2019 work</li> <li>Often correlate to specific Common Core Standards or other standards bodies</li> </ul>"},{"location":"legacy-docs/GLOSSARY/#competency-map","title":"Competency Map","text":"<ul> <li>Spreadsheet file that organizes content areas, competencies and standards for upload into the CBL tool</li> <li>Organized with each content area on a separate worksheet</li> <li>Example of competency map</li> <li>Currently, concrete content areas like English and Math have the same year-over-year competencies and standards with the number of demonstrations required remaining the same at all levels. In the future, standards and number of demonstrations will need to be specified by level.</li> </ul>"},{"location":"legacy-docs/GLOSSARY/#demonstration","title":"Demonstration","text":"<ul> <li>A project, piece of work or artifact where students show evidence of competence in one or more competencies</li> <li>Demonstrations can include a single standard, multiple standards within a single content area or competency, or multiple standards across different content areas and competencies</li> <li>The task database extends the demonstration model to support creation up front and assigning</li> </ul>"},{"location":"legacy-docs/GLOSSARY/#level-aka-portfolio","title":"Level (aka Portfolio)","text":"<ul> <li>Students begin each competency on a specific level and progress when the criteria to complete that level has been met</li> <li>Some schools use levels roughly equivalent to traditional grade levels while others set the levels based on a scale independent of grade levels (such as Portfolio years)</li> <li>Future plans: Introduce the ability to set each students\u2019 starting level for each competency independently</li> </ul>"},{"location":"legacy-docs/GLOSSARY/#continua","title":"Continua","text":"<ul> <li>The level that each standard is rated on</li> <li>Must be developed and defined consistently to ensure consistency across all evaluators (not trivial at all but B21 willingly shares their continua)</li> <li>Ranges from 1-12 for Building21\u2019s model</li> <li>Example of a continua</li> </ul>"},{"location":"legacy-docs/GLOSSARY/#rating","title":"Rating","text":"<ul> <li>The term rating is used instead of \u201cgrading\u201d when evaluating a demonstration or task</li> </ul>"},{"location":"legacy-docs/GLOSSARY/#competency-dashboard","title":"Competency Dashboard","text":""},{"location":"legacy-docs/GLOSSARY/#evidence-requirements","title":"Evidence Requirements","text":"<ul> <li>The number of demonstrations required for a specific standard to progress to the next level</li> <li>Set uniquely for each standard in the Competency Map</li> <li>Minimum of one is required but no maximum (typically between 2 and 5)</li> </ul>"},{"location":"legacy-docs/GLOSSARY/#override","title":"Override","text":"<ul> <li>Allows a teacher to immediately complete all remaining evidence requirements at the current level of a specific standard for a specific student</li> <li>One of two ways that a standard can be considered complete</li> <li>Not counted in the average score for a given competency</li> </ul>"},{"location":"legacy-docs/GLOSSARY/#missed-demonstration","title":"Missed demonstration","text":"<ul> <li>Recorded by selecting the \u201cM\u201d level on the continuum when logging a demonstration</li> <li>Logged when a student had the opportunity to demonstrate a standard but did not address it</li> <li>Typically occurs when a teacher intends for an assignment to cover specific standards and the student does not address that standard in the assignment</li> </ul>"},{"location":"legacy-docs/GLOSSARY/#minimum-passing-threshold","title":"Minimum passing threshold","text":"<ul> <li>Within each competency, the average rating required to progress to the next level</li> <li>Currently set globally as X-.5, where X is the current level (e.g. an 8.5 average is required for a level 9 competency)</li> <li>In the future, should be able to set this by individual student and competency</li> <li>Calculated as the average of all the scores that show on the dashboard in a given competency (ie if low level demonstrations are pushed off because higher ones are logged, they do not count towards the average)</li> </ul>"},{"location":"legacy-docs/GLOSSARY/#task-dashboard","title":"Task Dashboard","text":""},{"location":"legacy-docs/GLOSSARY/#task","title":"Task","text":"<ul> <li>A type of demonstration that is created before the student submits work</li> <li>Tasks have additional criteria and data associated such as Due Date, Expiration Date, Assignments, Instructions and Attachments</li> </ul>"},{"location":"legacy-docs/GLOSSARY/#due-date","title":"Due Date","text":"<ul> <li>The date the task is due to be sumitted</li> <li>After this date, the task is marked as overdue in the task interface</li> </ul>"},{"location":"legacy-docs/GLOSSARY/#expiration-date","title":"Expiration Date","text":"<ul> <li>The date a task can no longer be submitted</li> <li>When this date arrives, the submit button is deactivated for students</li> <li>In order to submit after this date, the teacher must change the Expiration date to a date in the future</li> </ul>"},{"location":"legacy-docs/GLOSSARY/#subtask","title":"Subtask","text":"<ul> <li>A task can be a subtask of another task</li> <li>Skills and ratings are kept independently and not rolled up to the parent task</li> <li>Only one level of sub tasks is allowed (no sub-sub tasks)</li> </ul>"},{"location":"legacy-docs/GLOSSARY/#to-do-list","title":"To Do List","text":"<ul> <li>Student created items that are associated with a specific section or a personal list</li> </ul>"},{"location":"legacy-docs/GLOSSARY/#portfolio","title":"Portfolio","text":"<ul> <li>A list of all completed and submitted tasks done by a student</li> <li>The holistic portfolio view aggregates the Past Tasks of each section into a single page</li> </ul>"},{"location":"legacy-docs/data/","title":"Data","text":"<p>```mermaid classDiagram</p> <p>ContentArea \u2013 Competency Competency \u2013 Skill</p> <p>Student \u2013* StudentCompetency StudentCompetency \u2013 Competency</p> <p>Student \u2013 Demonstration Demonstration \u2013 DemonstrationSkill DemonstrationSkill \u2192 Skill</p> <p>ContentArea : Code ContentArea : Title</p> <p>Competency : Code Competency : Descriptor Competency : Statement Competency : getTotalDemonstrationsRequired([level])</p> <p>Skill : Code Skill : Descriptor Skill : Statement Skill : DemonstrationsRequired Skill : getDemonstrationsRequiredByLevel(level)</p> <p>Student : Username Student : StudentNumber</p> <p>StudentCompetency : Level StudentCompetency : EnteredVia [enrollment/graduation] StudentCompetency : BaselineRating StudentCompetency : getCompletion() StudentCompetency : getDemonstrationsData() StudentCompetency : getEffectiveDemonstrationsData() StudentCompetency : getDemonstrationsLogged() StudentCompetency : getDemonstrationsMissed() StudentCompetency : getDemonstrationsComplete() StudentCompetency : getDemonstrationsAverage() StudentCompetency : isLevelComplete() StudentCompetency : getGrowth()</p> <p>Demonstration : Demonstrated Demonstration : ArtifactURL Demonstration : Comments</p> <p>DemonstrationSkill : Level DemonstrationSkill : Rating DemonstrationSkill : Override [true/false]</p> <p>```</p>"},{"location":"legacy-docs/data/content-areas/","title":"Content Areas","text":""},{"location":"legacy-docs/data/demonstrations/","title":"Demonstrations","text":""},{"location":"legacy-docs/data/student-competencies/","title":"Student Competencies","text":""},{"location":"legacy-docs/data/tasks/","title":"Tasks","text":"<p>```mermaid classDiagram</p> <p>Task \u2192 Task Task \u2013 TaskSkill TaskSkill \u2192 Skill Task \u2192 StudentTask StudentTask \u2013 StudentTaskSkill StudentTask \u2013 Student StudentTask \u2013 Section StudentTask \u2013 Demonstration StudentTaskSkill \u2192 Skill Task \u2013 TaskAttachment StudentTask \u2013 TaskAttachment</p> <p>Task : Title Task : DueDate Task : ExpirationDate Task : Instructions Task : Status [private/shared/deleted]</p> <p>StudentTask : ExperienceType StudentTask : DueDate StudentTask : ExpirationDate StudentTask : Status [private/shared/deleted]</p> <p>TaskAttachment : Type [GoogleDriveFile/Link]</p> <p>```</p>"},{"location":"legacy-docs/development/","title":"Development","text":""},{"location":"legacy-docs/development/contributing/","title":"Contributing Improvements","text":"<ol> <li>Create a new branch for your work named <code>features/XXXX</code> or <code>issues/XXXX</code> based on the latest commit in the <code>develop</code> branch</li> <li>If you have write access to the official SlateFoundation/slate-cbl repository, push your feature/issue branch there, otherwise create a forked repository on GitHub and push your branc to your fork</li> <li>Open a pull request aganist the <code>develop</code> branch in the SlateFoundation/slate-cbl repository</li> </ol>"},{"location":"legacy-docs/development/contributing/#tips-for-quality-pull-requests","title":"Tips for Quality Pull Requests","text":"<ul> <li>Adhere to Chris Beams\u2019 guide on How to Write a Git Commit Message</li> <li>Describe and link to any relevant issues or materials that prompted the changes</li> <li>Explain any complexity being added that may be non-obvious</li> </ul>"},{"location":"legacy-docs/development/deployment/","title":"Deploying a Release","text":""},{"location":"legacy-docs/development/releases/","title":"Making a Release","text":"<ol> <li>Open a pull request using the <code>releases/v2</code> branch as a base (the branch being merged into) and the <code>develop</code> branch as the compared branch (the branch being merged from)</li> <li> <p>Title the pull request in the format <code>Release: slate-cbl vX.Y.Z</code>, following semantic versioning practices:</p> </li> <li> <p>Increment only the patch number (Z) for bug fixes or minor improvements that do not change expected functionality</p> </li> <li>Increment the minor release number (Y) and reset the patch number (Z) to zero if new features are being added or other changes made that a typical user would want to automatically upgrade to</li> <li> <p>Increment the major release number (X) and reset the other numbers when changes are so significant that an automatic upgrade is not possible, or would not be desirable for typical users</p> </li> <li> <p>Outline with markdown bullet points in the pull request\u2019s description the changes made in the release as the will manifest from a user\u2019s perspective. This outline serves as a draft for the release notes which may ultimately be presented to end users to prepare them for changes in their experience.</p> </li> <li>Review the \u201cFiles changed\u201d tab in GitHub for any unexpected changes or changes that are not yet described by the release notes.</li> <li>Ensure that all status checks for builds and tests are successful</li> <li>Merge the pull request</li> <li> <p>Create a new release</p> </li> <li> <p>For Tag version input the designated release version from the pull request in the format <code>vX.Y.Z</code> (include the <code>v</code> prefix)</p> </li> <li>For Target select the <code>releases/v2</code> branch</li> <li>For Release title input the project name and version in the format <code>slate-cbl vX.Y.Z</code> (matching the pull request title, but without the <code>Release:</code> prefix)</li> <li>For Describe this release, copy the bullet point release notes drafted in the pull request</li> <li>Click Publish release</li> </ol>"},{"location":"legacy-docs/exports/","title":"Data Exports","text":"<p>Deprecated exports</p> <p>These exports (under <code>/site-root/cbl/exports/</code>) were all removed in slate-cbl#587 in favor of the new upstream pluggable <code>/data-exporters/</code> tree</p> <p>This doc content should all be adapted/rewritten to the new set of exports under <code>data-exporters/slate-cbl/**</code></p>"},{"location":"legacy-docs/exports/#demonstrations-legacy-csv","title":"Demonstrations-legacy (CSV)","text":"<ul> <li>Lists all the information entered for a specific demonstration in a single row</li> <li>Includes the continuum level logged for each standard</li> <li>Can be customized through the URL to only include students of specific groups or course sections</li> <li>Example of download URL: /cbl/exports/demonstrations?students=group+class_of_2018</li> <li>Link to example doc</li> </ul>"},{"location":"legacy-docs/exports/#demonstrations-csv","title":"Demonstrations (CSV)","text":"<ul> <li>Organized with each skill on a separate row so that each demonstration may occpy multiple rows</li> <li>Includes all details for each demonstration as well as the relevant competency, standard, rating and level</li> <li>Example of download URL: /cbl/exports/demonstrations-legacy?students=group+class_of_2018</li> </ul>"},{"location":"legacy-docs/exports/#competencies-csv","title":"Competencies (CSV)","text":"<ul> <li>Organized with each student on a single line</li> <li>Every subject area and competency is represented on the CSV for every student</li> <li>Each competency has columns for Logged (number of demonstrations), Total (total evidence requirements needed to progress) and Average (average score within that competency)</li> <li>Each content area has columns for Logged (total number of demonstrations), Total (total evidence requirements for the entire content area), Missed (total missed demonstrations), and -Average (average score of all competencies)</li> <li>Example of download URL: /cbl/exports/competencies?students=group+class_of_2018</li> <li>Link to example doc</li> </ul>"},{"location":"legacy-docs/exports/#competencies-details-csv","title":"Competencies-details (CSV)","text":"<ul> <li>Organized with a unique row for each student for each competency (total number of rows for each student equals the total number of active or completed competency portfolio levels)</li> <li>Each competency lists the portfolio level, average performance level, growth, progress %, total evidence requirements, total opportunities, total completed evidence requirements, total rated evidence requirements (non M or Override) and total missed evidence requirements</li> <li>Growth is calculated by including only the skills that have multiple numerical ratings (not M or Override). For each skill, you subtract the oldest from the most recent demonstration and then average this skill growth with all the other skills in that competency and portfolio level that had multiple numerical logs (and thus could calculate growth). Skills that have only one demonstration can not have growth and thus are NULL for growth. If within a competency, only one skill has growth for the given portfolio level, the growth of the competency equals the growth of that one skill.</li> <li>Example of download URL: /cbl/exports/competencies-details?students=group+class_of_2018</li> </ul>"},{"location":"legacy-docs/exports/#content-areas-csv","title":"Content-areas (CSV)","text":"<ul> <li>Organized with a unique row for each student for each content area level (total number of rows for each student equals the total number of completed or active content area portfolio levels)</li> <li>Each content area row lists the portfolio level, performance level, growth, progress %, total evidence requirements, total opportunities, completed evidence requirements, rated evidence requirements (non M or Override), and missed evidence requirements</li> <li>Growth is calculated by including only the skills that have two or more numerical ratings (not M or Override). For each skill, you subtract the oldest from the most recent demonstration and then average this skill growth with all the other skills that have growth in the given competency at that level. Then, you average the growth for each competency to calculate the growth for the content area. This means that if a single skill within a competency is the only one that has growth, the growth for that skill is treated as the competency growth and factors strongly into the averaging. If no skill in a competency has growth (they\u2019re all NULL), then the competency growth is NULL and should not count towards the content-area growth average.</li> <li>Example of download URL: /cbl/exports/content-areas?students=group+class_of_2018</li> </ul>"},{"location":"legacy-docs/exports/#tasks-csv","title":"Tasks (CSV)","text":"<ul> <li>Organized with a unique row for each task rated for each student</li> <li>Each row lists the student, their ID, task name, teacher who assigned it, studio, status of the task, due date, expiration date, submitted date and skill codes</li> <li>Example of download URL: /cbl/exports/tasks?students=group+class_of_2018</li> </ul>"},{"location":"legacy-docs/logic/","title":"Logic","text":"<p>TODO: insert screenshots of competency dashboard with logic annotated as demonstrations, missed demonstrations, and overrides get added</p>"},{"location":"legacy-docs/logic/growth/","title":"Growth","text":""},{"location":"legacy-docs/logic/growth/#baseline-rating","title":"Baseline Rating","text":"<p>Baseline ratings are stored on the <code>StudentCompetency</code> model, and can come to be set three ways:</p> <ul> <li>In bulk via the enrollment tool</li> <li>From the average of the previous level during auto-graduation</li> <li>If no baseline is otherwise set by the time at least one rating is available for every skill, the average of the earliest rating in each skill is saved as the baseline</li> </ul>"},{"location":"legacy-docs/logic/growth/#skill-growth","title":"Skill Growth","text":"<p>If a baseline rating is available, growth for each skill is calculated as the difference between the baseline rating and the most recent rating for that skill. If no baseline rating is available, growth is calculated as the difference between the oldest and most recent rating. If no baseline or less than two ratings are available for a given skill, no growth calculation is available. Missed and overridden skill demonstrations are filtered out before any growth calculations are made.</p>"},{"location":"legacy-docs/logic/growth/#competency-growth","title":"Competency Growth","text":"<p>If at least half the skills in a competency have growth calculations available, growth for the competency is calculated as the average of available skill growth calculations.</p>"},{"location":"legacy-docs/logic/growth/#content-area-growth","title":"Content Area Growth","text":"<p>If at least one competency has a growth calculation available, growth for the content area is calculated as the average of all available competency growth calculations.</p>"},{"location":"legacy-docs/logic/missed-demonstrations/","title":"Missed Demonstrations","text":"<p>The number of missed demonstrations for a given student+skill is calculated as follows:</p> <ol> <li>If any override is logged for the given student+skill, 0 missed demonstrations are reported, regardless of any missed demonstrations that may have been logged before the override.</li> <li>Count the number of missed demonstrations logged. Missed demonstrations are stored like normal demonstrations but with <code>DemonstratedLevel</code> equal to the special value <code>0</code>.</li> <li>If any demonstrations are logged for the given skill where <code>DemonstratedLevel</code> does not equal <code>0</code>, even those below <code>TargetLevel</code>, these are subtracted from the number of demonstrations required for the given skill to obtain the remaining number of demonstrations required.</li> <li>If there are more missed demonstrations logged than the number produced by step #3, the lesser number is reported.</li> </ol>"},{"location":"legacy-docs/logic/student-competency-calculations/","title":"Student Competency Functions","text":"Method Name Description Output getDemonstrationsData Get demonstrations, grouped by <code>SkillID</code> and ordered by <code>DemonstrationDate</code> and <code>DemonstrationID</code> Array of demonstrations getDemonstrationOpportunities Equal to the total amount of non-Override demonstrations found in <code>getDemonstrationsData</code> Array of demonstrations sortDemonstrations Demonstrations are sorted by their <code>ID</code> Array of demonstrations sortEffectiveDemonstrations Sort demonstrations by <code>DemonstratedLevel</code>, or by the <code>sortDemonstrations</code> method if the demonstrations have the same <code>DemonstratedLevel</code> Array of demonstrations getEffectiveDemonstrationsData Sort <code>getDemonstrationsData</code> via <code>sortEffectiveDemonstrations</code>. Reduce the number of demonstrations to the amount of demonstrations required for the respective <code>Level</code>. Sort the demonstrations again via <code>sortDemonstrations</code> Array of demonstrations getDemonstrationsLogged Get demonstrations via <code>getEffectiveDemonstrationsData</code>. Exclude Overrides and records that do not have a DemonstratedLevel. Total of demonstrations found getDemonstrationsMissed Get demonstrations via <code>getEffectiveDemonstrationsData</code>. Exclude Overrides and records that have a DemonstratedLevel Total of demonstrations found getDemonstrationsComplete Get demonstrations via <code>getEffectiveDemonstrationsData</code>. If <code>DemonstratedLevel</code> is set, Increase the total by 1. If record is an Override, Increase the total by the amount of demonstrations required for the respective Skill Level (via <code>Skill::getDemonstrationsRequiredByLevel()</code>). If the Demonstration is an Override, equal to the the amount of skills required for that demonstration. Total of demonstrations completed getDemonstrationsAverage Equal to the total of <code>DemonstratedLevel</code> for demonstrations via <code>getEffectiveDemonstrations</code> that are not an Override, divided by the amount of demonstrations via <code>getDemonstrationsLogged</code>. (There must be at least one demonstration logged.) Average DemonstratedLevel for demonstrations getDemonstrationsRequired Get demonstrations required for the respective <code>Competency</code> and <code>Level</code> Total of demonstrations required getMinimumAverage Get minimum average rating for the respective Level. This can be implemented in the following ways. Implementation will vary based on Slate configuration. Either: Hard-coded array of Levels mapped to the custom Minimum Average OR Hard-coded function that can determine the Minimum Average based on the StudentCompetency OR Hard-coded Minimum Average value. Minimum Average Rating getMinimumRating Get minimum rating for the respective Level. This can be implemented in the following ways. Implementation will vary based on Slate configuration. Either: Hard-coded array of Levels mapped to the custom Minimum Rating OR Hard-coded function that can determine the Minimum Rating based on the StudentCompetency OR Hard-coded Minimum Rating value Minimum Rating isLevelComplete Determine if the respective Level is completed by: Getting the total of demonstrations (Evidence Required) for the respective Competency and confirming that The amount of demonstrations completed (via <code>getDemonstrationsCompleted</code>) is greater than or equal to the amount of Evidence Required AND The average demonstration rating (via <code>getDemonstrationsAverage</code>) is greater than or equal to the minimum average (via <code>getMinimumAverage</code>) AND All ratings (via <code>getEffectiveDemonstrations</code>) are above the minimum rating (via <code>getMinimumRating</code>). Custom Level Is Complete function that determines if the level is completed for the given StudentCompetency Implementation will vary based on Slate configuration. True or False"},{"location":"legacy-docs/setup/importing-competency-maps/","title":"Importing Competency Maps","text":""},{"location":"legacy-docs/setup/importing-competency-maps/#clone-and-customize-sample-spreadsheet","title":"Clone and Customize Sample Spreadsheet","text":""},{"location":"legacy-docs/setup/importing-competency-maps/#build-csv-index","title":"Build CSV Index","text":""},{"location":"legacy-docs/setup/importing-competency-maps/#import-into-slate","title":"Import into Slate","text":"<ol> <li>Visit <code>/connectors/cbl-maps</code> in a web browser on your Slate instance</li> <li>Click Synchronize to open the synchronization tool</li> <li>Paste the CSV URL for your index sheet into the Map Index CSV field*</li> <li>Run the synchronization with Pretend enabled first to preview the changes to be made. If everything looks good, use your browser\u2019s back button to return to the setup form. Uncheck Pretend and run again with the same settings.</li> </ol> <p>* The default Maps Index CSV can be changed to save yours by creating a file called <code>php-config/Slate/CBL/MapsConnector.config.php</code>:</p> <pre><code>&lt;?php\n\nSlate\\CBL\\MapsConnector::$defaultCsvUrl = 'https://docs.google.com/spreadsheets/.../export?format=csv&amp;id=...&amp;gid=...';\n</code></pre>"},{"location":"legacy-docs/user_interfaces/","title":"User Interfaces","text":"<p>Phase 1 focused on the development of competency dashboards. Phase 2 focuses on task management. Each of these efforts requires a separate interface for students and teachers. The information below</p>"},{"location":"legacy-docs/user_interfaces/competencies/","title":"Competency Overview","text":""},{"location":"legacy-docs/user_interfaces/competencies/#demonstrations-that-show-in-the-grid","title":"Demonstrations that show in the grid","text":"<ul> <li>Demonstrations fill left to right based on the date logged</li> <li>When empty cells remain, all logged demonstrations (whether a number or M) fill the next empty cell moving left to right</li> <li>The top X scores show for each standard where X is the number of evidence requirements for that standard</li> <li>If multiple equivalent scores exceed the number of demonstrations required, the most recent score should be shown</li> <li>If X scores have not been logged, Missed Demonstrations appear at the end   -Lower scores and Ms are replaced when higher scores are logged</li> </ul>"},{"location":"legacy-docs/user_interfaces/competencies/#completion-progress-of-each-competency","title":"Completion progress of each competency","text":"<ul> <li>Calculated as total demonstrations counted towards each standards\u2019 completion divided by total demonstrations required for the entire competency</li> <li>For each standard, the maximum demonstrations counted towards completion of the competency is the total number of evidence requirements for that standard</li> </ul>"},{"location":"legacy-docs/user_interfaces/competencies/#average-score-in-a-competency","title":"Average score in a competency","text":"<ul> <li>Calculated as the average of the top X logged demonstrations for each standard where X is the number of evidence requirements for each standard</li> <li>Once a competency is 50% complete, if the average score is below the minimum passing threshold, the average score remains fixed in the cell with a red notation behind it</li> <li>Overrides do not count towards a competency average and should be ignored. This means that if an Override serves to complete multiple demonstrations, the denominator of the average is reduced by the number of demonstrations that override counts for.</li> </ul>"},{"location":"legacy-docs/user_interfaces/competencies/#progressing-to-the-next-competency-level","title":"Progressing to the next competency level","text":"<ul> <li>Student earns completion record for competency when they meet these two conditions</li> <li>Have at least the minimum number of demonstrations logged for each of that competency standards</li> <li>The average score across all standards in that competency is at least X-.5 where X is the current level (e.g. 8.5 minimum average for level 9)</li> <li>In the future, growth criteria should be added as an alternative promotion metric where growth is calculated as the average of the most recent demonstration for each standard minus the average of the first demonstration for each standard</li> </ul>"},{"location":"legacy-docs/user_interfaces/competencies/students/","title":"Student Competency Dashboard","text":""},{"location":"legacy-docs/user_interfaces/competencies/students/#recent-progress","title":"Recent Progress","text":"<ul> <li>The 10 most recent demonstrations logged for that student are shown</li> <li>Data shown includes: competency, standard, teacher that logged it, and continuum level logged</li> </ul>"},{"location":"legacy-docs/user_interfaces/competencies/students/#graduation-progress","title":"Graduation Progress","text":"<ul> <li>Calculated through a formula pre-determined by the school</li> <li>Requires definition of the specific courses required for graduation and mapping each to a group of standards that serves as the equivalent</li> </ul>"},{"location":"legacy-docs/user_interfaces/competencies/teachers/","title":"Teacher Competency Dashboard","text":""},{"location":"legacy-docs/user_interfaces/competencies/teachers/#selecting-a-student-group","title":"Selecting a Student Group","text":"<ul> <li>The drop down menu \u201cStudents\u201d produces a menu of all course sections and groups in Slate</li> <li>When selected, the students assigned to the given course section or group populate the x axis</li> <li>The list of students sorts alphabetically by last name, first name, and is scrollable left and right</li> </ul>"},{"location":"legacy-docs/user_interfaces/competencies/teachers/#selecting-a-content-area","title":"Selecting a Content Area","text":"<ul> <li>The drop down menu \u201cContent Area\u201d produces a list of all content areas uploaded from the Competency Map during setup</li> <li>The selected content area populates the y axis with the competencies and standards under that content area</li> </ul>"},{"location":"legacy-docs/user_interfaces/competencies/teachers/#logging-a-demonstration","title":"Logging a Demonstration","text":"<ul> <li>The \u201cLog a Demonstration\u201d window can be initiated from the teacher view or within a Skill Overview window</li> <li>Teachers can log demonstrations within one competency or multiple competencies at the same time</li> <li>Teachers can rate one or more standards within each competency</li> <li>Student, Type of Context, Experience and Performance Task are required fields   Artifact (URL) and notes are optional fields</li> </ul>"},{"location":"legacy-docs/user_interfaces/competencies/teachers/#next-student-button","title":"Next Student button","text":"<ul> <li>This feature allows teachers to quickly evaluate multiple students that have submitted similar projects or assignments without having to reload the details and competencies multiple times</li> <li>When selected, after submitting the demonstration, the Student field changes to the next student (alphabetically) in the loaded group or course section</li> <li>After moving to the next student, the following fields are retained: Type of Performance, Context, Performance Task, selected competencies and standards evaluated   Reset artifact URL, comments, and selected levels</li> </ul>"},{"location":"legacy-docs/user_interfaces/competencies/teachers/#override","title":"Override","text":"<ul> <li>For students performing well above their current level on a specific standard, teachers can override the remaining demonstrations required and complete that standard for a specific student</li> <li>The remaining empty cells in that standard fill in as completed with the current level\u2019s color and are marked with an O rather than the evaluated level</li> <li>If an M is present in the standard, the M is replaced with a completed O cell in the gridview, in the detail view the M is still visible.</li> <li>Overrides have a DemosntratedLevel equal to the TargetLevel (the current portfolio) but do not factor into competency averages.</li> </ul>"},{"location":"legacy-docs/user_interfaces/tasks/","title":"Task Management","text":"<p>The second phase the CBL product is the creation of a task management system that allows teachers to create tasks that they assign to students. Students view information about the tasks such as due dates, skills associated and instructions as well as submit finished tasks to teachers for rating. </p>"},{"location":"legacy-docs/user_interfaces/tasks/database/","title":"Task Database","text":"<p>A collection of saved tasks intended to be used in the future</p>"},{"location":"legacy-docs/user_interfaces/tasks/database/#creation","title":"Creation","text":"<ul> <li>Tasks can be created directly in the task database or through saving a task created in the Task Management interface</li> <li>Due dates, expiration dates and assignments DO NOT occcur in the task database, but other relevant context for the task such as its parent, the type of experience, creator, date, links, instructions and skills associated are entered.</li> <li>Editing tasks done only through the Task Database, not in the Teacher Task Dashboard.</li> <li>When creating a task in the Task Database, other existing tasks are not selectable for prepopulation or overriding.</li> </ul>"},{"location":"legacy-docs/user_interfaces/tasks/students/","title":"Student Task Management","text":""},{"location":"legacy-docs/user_interfaces/tasks/students/#current-tasks","title":"Current Tasks","text":"<ul> <li>Initially presented as a single stream of all tasks for all sections</li> <li>Filtering available by section, due dates, and task status</li> <li>Task details can be opened by clicking the task in the Current Tasks list</li> <li>Once a task is completed, the task is removed from the Current Tasks list and moved to the Past Tasks (Portfolio) section</li> </ul>"},{"location":"legacy-docs/user_interfaces/tasks/students/#to-do-list","title":"To Do List","text":"<ul> <li>Student created list of items to do</li> <li>Due dates optionally set by students</li> <li>When completed, To Do items move to the Completed Items seciton</li> <li>Clearing completed items occurs one at a time or thourgh the Clear All button</li> </ul>"},{"location":"legacy-docs/user_interfaces/tasks/students/#past-tasks","title":"Past Tasks","text":"<ul> <li>Summary of all completed and rated tasks for a given section</li> <li>Specifies the number of skills associated with a given task and how many were rated on and below the current level for that skill</li> </ul>"},{"location":"legacy-docs/user_interfaces/tasks/students/#submitting-a-task","title":"Submitting a Task","text":"<ul> <li>After opening a task, students can view all relvant information as well as add links and attachments</li> <li>When ready, students submit the task and any associated documents to a teacher for rating</li> </ul>"},{"location":"legacy-docs/user_interfaces/tasks/students/#state-flow","title":"State flow","text":"<p>```mermaid graph TD     VIEW_MAIN[Dashboard View]</p> <pre><code>NAV_USER_HASH --&gt; |Browser-driven navigation| ROUTER\nNAV_ROUTER_HASH --&gt; |App-driven navigation| ROUTER\n\nCTRL_DASH_ROUTER --&gt; |\"setStudent(...)\"| VIEW_MAIN\nCTRL_DASH_ROUTER --&gt; |\"setSection(...)\"| VIEW_MAIN\n\nVIEW_MAIN -.-&gt; |\"control: { studentchange }\"| CTRL_DASH_CHANGE\nVIEW_MAIN -.-&gt; |\"control: { sectionchange }\"| CTRL_DASH_CHANGE\nVIEW_MAIN -.-&gt; |\"control: { studentchange }\"| CTRL_TASKS\nVIEW_MAIN -.-&gt; |\"control: { sectionchange }\"| CTRL_TASKS\nVIEW_MAIN -.-&gt; |\"control: { studentchange }\"| CTRL_TODOS\nVIEW_MAIN -.-&gt; |\"control: { sectionchange }\"| CTRL_TODOS\n\n\nsubgraph User navigates via browser\nNAV_USER_HASH&gt;Browser Address Bar]\nend\n\nsubgraph User navigates via UI components\nNAV_STUDENT_IN&gt;Student Selector]\nNAV_SECTION_IN&gt;Section Selector]\nCTRL_MAIN_NAV(\"\nDashboard Controller\n&lt;code&gt;\n&lt;li&gt;onStudentSelectorSelect&lt;/li&gt;\n&lt;li&gt;onStudentSelectorClear&lt;/li&gt;\n&lt;li&gt;onSectionSelectorSelect&lt;/li&gt;\n&lt;li&gt;onSectionSelectorClear&lt;/li&gt;\n&lt;/code&gt;\n\")\n\nNAV_STUDENT_IN -.-&gt; |select| CTRL_MAIN_NAV\nNAV_STUDENT_IN -.-&gt; |clear| CTRL_MAIN_NAV\nNAV_SECTION_IN -.-&gt; |select| CTRL_MAIN_NAV\nNAV_SECTION_IN -.-&gt; |clear| CTRL_MAIN_NAV\n\nCTRL_MAIN_NAV --&gt; |\"redirectTo(...)\"| NAV_ROUTER_HASH\nend\n\nsubgraph Route parameters applied to top-level view state\nNAV_ROUTER_HASH&gt;Browser Address Bar]\nROUTER(Ext.app.route.Router)\nCTRL_DASH_ROUTER(\"\nDashboard Controller\n&lt;code&gt;\n&lt;li&gt;showDashboard(studentUsername, sectionCode)&lt;/li&gt;\n&lt;/code&gt;\n\")\n\nROUTER --&gt; |\"routes: { ':studentUsername/:sectionCode' }\"| CTRL_DASH_ROUTER\nend\n\nsubgraph New state propagates throughout application\nCTRL_TASKS(\"\nTasks Controller\n&lt;code&gt;\n&lt;li&gt;onStudentChange&lt;/li&gt;\n&lt;li&gt;onSectionChange&lt;/li&gt;\n&lt;/code&gt;\n\")\nCTRL_TODOS(\"\nTodos Controller\n&lt;code&gt;\n&lt;li&gt;onStudentChange&lt;/li&gt;\n&lt;li&gt;onSectionChange&lt;/li&gt;\n&lt;/code&gt;\n\")\nSTORE_TASKS((Tasks Store))\nSTORE_TODOS((Todos Store))\nVIEW_TASKS[Tasks View]\nVIEW_TODOS[Todos View]\n\nCTRL_TASKS --&gt; |\"setReadOnly(...)\"| VIEW_TASKS\nCTRL_TASKS --&gt; |\"setStudent(...)\"| STORE_TASKS\nCTRL_TASKS --&gt; |\"setSection(...)\"| STORE_TASKS\n\nCTRL_TODOS --&gt; |\"setReadOnly(...)\"| VIEW_TODOS\nCTRL_TODOS --&gt; |\"setStudent(...)\"| STORE_TODOS\nCTRL_TODOS --&gt; |\"setSection(...)\"| STORE_TODOS\n\nSTORE_TASKS -.-&gt; |data events| VIEW_TASKS\nSTORE_TODOS -.-&gt; |data events| VIEW_TODOS\n\nVIEW_TASKS -.-&gt; |User Intents| CTRL_TASKS\nVIEW_TODOS -.-&gt; |User Intents| CTRL_TODOS\nend\n\nsubgraph New state reflected back to all navigation UI\nCTRL_DASH_CHANGE(\"\nDashboard Controller\n&lt;code&gt;\n&lt;li&gt;onStudentChange&lt;/li&gt;\n&lt;li&gt;onSectionChange&lt;/li&gt;\n&lt;/code&gt;\n\")\nNAV_STUDENT_OUT&gt;Student Selector]\nNAV_SECTION_OUT&gt;Section Selector]\n\nCTRL_DASH_CHANGE --&gt; |\"setValue(...)\"| NAV_STUDENT_OUT\nCTRL_DASH_CHANGE --&gt; |\"setValue(...)\"| NAV_SECTION_OUT\nend\n</code></pre> <p>```</p>"},{"location":"legacy-docs/user_interfaces/tasks/teachers/","title":"Teacher Task Dashboard","text":""},{"location":"legacy-docs/user_interfaces/tasks/teachers/#create-a-task","title":"Create a Task","text":"<ul> <li>Teachers can create a task in the teacher task interface.</li> <li>Optionally, creators of tasks can add them to the task database for future use by others by selecting a check box in the task creation window.</li> </ul>"},{"location":"legacy-docs/user_interfaces/tasks/teachers/#assign-a-task","title":"Assign a Task","text":"<ul> <li>Assigning a task is done by student with the option in the UI to assign to the current roster of a section.</li> <li>If a student is added to section after the task has been assigned, that task is not automaically assigned to them and the teacher must select the blank cell in the grid and assign it to that student by hand.</li> <li>In the Title bar, previous tasks are searchable by name and show the date created as well as the creator</li> <li>After selecting an existing task, teachers can override the details of that task for a given section without editing the task in the task database.</li> </ul>"},{"location":"legacy-docs/user_interfaces/tasks/teachers/#evaluate-a-task","title":"Evaluate a Task","text":"<ul> <li>Teachers can evaluate a task at any time (even if not yet submitted by students)</li> <li>The interface indicates when a student has submitted or resubmitted a task and whether it is one time or late</li> </ul>"},{"location":"legacy-docs/user_interfaces/tasks/teachers/#status-of-a-task","title":"Status of a Task","text":"<ul> <li>The following states are possible and visually distinct in the interface</li> <li>Not Assigned</li> <li>Due</li> <li>Needs Rated</li> <li>Completed</li> <li>Revision Assigned</li> <li>Revision Needs Rated</li> <li>Past Due</li> <li>Late Needs Rated</li> </ul>"},{"location":"operations/","title":"Operations","text":"<p>The Operations section provides content covering:</p> <ul> <li>Overviews of the physical infrastructure and service components</li> <li>Building hosted environments</li> <li>Maintaining hosted environments</li> <li>Backing up and restoring content</li> <li>Monitoring system health</li> </ul>"},{"location":"operations/data-loading/contacts-spreadsheet/","title":"Contacts Spreadsheet","text":""},{"location":"operations/data-loading/contacts-spreadsheet/#initialize-git-branch","title":"Initialize git branch","text":"<p>Initialize a new git repository if needed, or just <code>cd</code> into an existing one:</p> <pre><code>git init myschool-slate\ncd myschool-slate\n</code></pre> <p>Then check out a fresh branch to track content import content:</p> <pre><code>git checkout --orphan gitsheets/imports/contacts\n</code></pre> <p>Declare a new gitsheet to store contact data by creating this file:</p> .gitsheets/student-contacts.toml <pre><code>[gitsheet]\nroot = \"student-contacts\"\npath = \"${{ student.username }}\"\n\n[gitsheet.fields.student]\ndefault = {}\n</code></pre> <p>Finally, stage and commit the gitsheet declaration:</p> <pre><code>git add .gitsheets/student-contacts.toml\ngit commit -m \"feat: define student-contacts gitsheet\"\n</code></pre>"},{"location":"operations/data-loading/contacts-spreadsheet/#spreadsheet-template","title":"Spreadsheet template","text":"<p>Populate this template with student and relationship contact details:</p> <pre><code>student.name,student.username,student.number,student.email.personal,student.phone.home,student.phone.mobile,guardian1.name,guardian1.relationship,guardian1.email.personal,guardian1.phone.home,guardian1.phone.mobile,guardian1.phone.work,guardian2.name,guardian2.relationship,guardian2.email.personal,guardian2.phone.home,guardian2.phone.mobile,guardian2.phone.work\nJohn Doe,johndoe7,,johndoe7@gmail.com,,267-111-1234,Michael Doe,Father,michaeldoe7@gmail.com,,267-222-1234,394-231-3245,Jane Doe,Mother,janedoe7@gmail.com,,267-384-2835,325-234-3818\n</code></pre>"},{"location":"operations/data-loading/contacts-spreadsheet/#load-spreadsheet-into-gitsheet","title":"Load spreadsheet into gitsheet","text":"<p>Use the <code>git sheet upsert</code> command to load the filled CSV from the previous template:</p> <pre><code>git sheet upsert \\\n--delete-missing \\\n\"student-contacts\" \\\n~/Downloads/myschool_contacts.csv\n</code></pre> <p>And then commit the resulting staged records:</p> <pre><code>git commit -m \"data: load student contacts from spreadsheet\"\n</code></pre>"},{"location":"operations/data-loading/contacts-spreadsheet/#review-relationship-labels","title":"Review relationship labels","text":"<p>Use this command to analyze all the relationship labels used in this dataset:</p> <pre><code>git sheet query student-contacts \\\n| jq '[ .[].guardian1.relationship, .[].guardian2.relationship ] | unique'\n</code></pre> <p>If any strange values or abbreviations are present, consider using find/replace on the original spreadsheet to normalize this with some more standard values, and then repeat the load step above to add a commit with your changes.</p>"},{"location":"operations/data-loading/contacts-spreadsheet/#extract-data-from-slate-instance-into-gitsheet","title":"Extract data from Slate instance into gitsheet","text":"<p>Install the <code>slate-gitsheets</code> command if needed:</p> <pre><code>npm install -g slate-gitsheets\n</code></pre> <p>Download users from Slate into another branch:</p> <pre><code>slate-gitsheets extract-slate \\\n--ref=gitsheets/slate \\\n--host=https://myschool.org/ \\\n--host-name=myschool\n</code></pre>"},{"location":"operations/data-loading/contacts-spreadsheet/#merge-spreadsheet-data-into-slate-data","title":"Merge spreadsheet data into Slate data","text":"<p>Merge data from the <code>student-contacts</code> gitsheet into the Slate <code>users</code> gitsheet:</p> <pre><code>slate-gitsheets merge-contacts \\\n--contacts-ref=gitsheets/imports/contacts \\\n--slate-ref=gitsheets/slate\n</code></pre>"},{"location":"operations/data-loading/contacts-spreadsheet/#load-data-from-gitsheets-into-slate-instance","title":"Load data from gitsheets into Slate instance","text":"<pre><code>slate-gitsheets load-slate \\\n--ref=gitsheets/slate \\\n--host=https://myschool.org/ \\\n--host-name=myschool\n</code></pre>"},{"location":"operations/data-management/name-change/","title":"Name changes","text":"<p>If a person\u2019s name needs to be changed, their <code>First Name</code>, <code>Last Name</code>, and <code>Preferred [First] Name</code> fields can be edited by any staff user from the <code>/manage</code> interface.</p> <p><code>Username</code> can be edited there as well if desired.</p>"},{"location":"operations/data-management/name-change/#propogating-to-google-workspace","title":"Propogating to Google Workspace","text":"<p>When Slate is used to synchronize a school\u2019s Google Workspace, a name and/or email address change made in Slate should be propogated to Google Workspace by Slate.</p> <p>After making changes to name or username fields, open a user\u2019s Contacts tab under the <code>/manage</code> interface and edit their school email to match the new desired email address if it is to be updated as well. A user\u2019s desired Google Workspace email is set by whatever email address <code>@</code> the school\u2019s Google Workspace domain is set for them, and for any user created by Slate or previously found in a sync by Slate, changes to this desired email address will be detected and applied to Google.</p> <p>Visit <code>/connectors/gsuite</code> and use Pretend mode first to confirm that the desired changes are to be applied correctly, and then run the synchronization again with Pretend mode turned off to apply the changes.</p> <p>When a user\u2019s email address in the Google Workspace gets updated, the previous one is automatically left on the account as an alias so emails sent to the previous email address will continue to be delivered. This is standard behavior for Google Workspace. If this is not desired, have a Google Workspace administrator look up the user in the Google Workspace admin console and manually delete the alias after the rename is synchronized.</p>"},{"location":"operations/data-management/name-change/#propogating-to-canvas","title":"Propogating to Canvas","text":"<p>When Slate is used to synchronize a school\u2019s Canvas instance, a name and/or email address change made in Slate should be propogated to Canvas by Slate.</p> <p>After making any desired changes to name and/or email, ensure the changes are synchronized first with Google Workspace if applicable. Otherwise, make sure any new email address is deliverable before synchronizing Canvas to use it.</p> <p>Visit <code>/connectors/canvas</code> and use Pretend mode first to confirm that th edesired changes are to be applied correctly with Push Users enabled, and then run the synchronization again with Pretend mode turned off to apply the changes.</p>"},{"location":"usage/","title":"Usage","text":"<p>The Usage section provides content covering:</p> <ul> <li>Overviews of the system features</li> <li>Setting up and customizing a user account</li> <li>Using the system\u2019s features for day-to-day work</li> <li>Reporting and integration</li> </ul>"}]}