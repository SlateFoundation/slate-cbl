{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome \u00b6 Welcome, browse sections at the top of the site.","title":"Welcome"},{"location":"#welcome","text":"Welcome, browse sections at the top of the site.","title":"Welcome"},{"location":"development/","text":"Development \u00b6 The Development section provides content covering: Overviews of the internal architecture and components Obtaining development environments Executing development workflows Feature implementation guides and examples","title":"Development"},{"location":"development/#development","text":"The Development section provides content covering: Overviews of the internal architecture and components Obtaining development environments Executing development workflows Feature implementation guides and examples","title":"Development"},{"location":"development/email/","text":"Working with Email \u00b6 Catching emails in development \u00b6 In the studio, you can enable relaying email to a specified SMTP endpoint. HELO and mailtrap are easy SMTP endpoints to set up for development that provide UIs for reviewing emails sent to all recipients. When emails are configured to be relayed to these services, they will be trapped for review and never actually delivered to anyone externally, no matter what recipients you use. As opposed to overriding recipient emails to test email features, this approach enables you to verify that personalized bulk emails send the right content to the right recipients. Using HELO \u00b6 Download and open the HELO app Launch studio, run start-all Install and activate postfix email backend: enable-email Configure postfix email backend to relay to EHLO app on Docker host machine: enable-email-relay host.docker.internal 2525 studio Or, using mailtrap: enable-email-relay smtp.mailtrap.io 2525 mailtrapusername mailtrappassword Sending a test email \u00b6 From the studio: Install netcat: hab pkg install --binlink core/netcat Open SMTP connection: nc localhost 25 Start SMTP session: EHLO localhost.localdomain Set sender: MAIL FROM: <sender@example.com> Set recipient: RCPT TO: <recipient@example.com> Set message: DATA Subject: Hello world! This is the body of my email. Have a good day. . Close SMTP session: QUIT Review postfix backend log: less -S /hab/cache/sys.log","title":"Working with Email"},{"location":"development/email/#working-with-email","text":"","title":"Working with Email"},{"location":"development/email/#catching-emails-in-development","text":"In the studio, you can enable relaying email to a specified SMTP endpoint. HELO and mailtrap are easy SMTP endpoints to set up for development that provide UIs for reviewing emails sent to all recipients. When emails are configured to be relayed to these services, they will be trapped for review and never actually delivered to anyone externally, no matter what recipients you use. As opposed to overriding recipient emails to test email features, this approach enables you to verify that personalized bulk emails send the right content to the right recipients.","title":"Catching emails in development"},{"location":"development/email/#using-helo","text":"Download and open the HELO app Launch studio, run start-all Install and activate postfix email backend: enable-email Configure postfix email backend to relay to EHLO app on Docker host machine: enable-email-relay host.docker.internal 2525 studio Or, using mailtrap: enable-email-relay smtp.mailtrap.io 2525 mailtrapusername mailtrappassword","title":"Using HELO"},{"location":"development/email/#sending-a-test-email","text":"From the studio: Install netcat: hab pkg install --binlink core/netcat Open SMTP connection: nc localhost 25 Start SMTP session: EHLO localhost.localdomain Set sender: MAIL FROM: <sender@example.com> Set recipient: RCPT TO: <recipient@example.com> Set message: DATA Subject: Hello world! This is the body of my email. Have a good day. . Close SMTP session: QUIT Review postfix backend log: less -S /hab/cache/sys.log","title":"Sending a test email"},{"location":"development/migrations/","text":"Developing Migrations \u00b6 Within the development studio: Create a new file under php-migrations/ Load modified working tree into runtime: update-site Execute all migrations: console-run migrations:execute --all (Re)Execute a specific migration: console-run migrations:execute --force \"Emergence/People/20191209_system-user\"","title":"Developing Migrations"},{"location":"development/migrations/#developing-migrations","text":"Within the development studio: Create a new file under php-migrations/ Load modified working tree into runtime: update-site Execute all migrations: console-run migrations:execute --all (Re)Execute a specific migration: console-run migrations:execute --force \"Emergence/People/20191209_system-user\"","title":"Developing Migrations"},{"location":"development/filesystem-api/","text":"Filesystem API \u00b6 This section documents the emergence-site-v1 filesystem API. The filesystem API consists of a declared set of standard root filesystem tree names for a site. Each standard root is associated with a definition of how files within should be named and structured, and how the site should incorporate the contents of the tree into its behavior.","title":"Filesystem API"},{"location":"development/filesystem-api/#filesystem-api","text":"This section documents the emergence-site-v1 filesystem API. The filesystem API consists of a declared set of standard root filesystem tree names for a site. Each standard root is associated with a definition of how files within should be named and structured, and how the site should incorporate the contents of the tree into its behavior.","title":"Filesystem API"},{"location":"development/filesystem-api/api-docs/","text":"api-docs \u00b6 The api-docs root serves to render a complete OpenAPI specification for the site. Within, the components of an OpenAPI specification are spread out over a tree structure to best enable overlaying projects to precisely override/extend API documentation.","title":"api-docs"},{"location":"development/filesystem-api/api-docs/#api-docs","text":"The api-docs root serves to render a complete OpenAPI specification for the site. Within, the components of an OpenAPI specification are spread out over a tree structure to best enable overlaying projects to precisely override/extend API documentation.","title":"api-docs"},{"location":"development/filesystem-api/console-commands/","text":"console-commands \u00b6 The console-commands root provides command-line console commands that developers can run in the context of the site. These can also be useful in DevOps automations that use shell scripting to orchestrate operations and to provide integration points for external shell-based systems.","title":"console-commands"},{"location":"development/filesystem-api/console-commands/#console-commands","text":"The console-commands root provides command-line console commands that developers can run in the context of the site. These can also be useful in DevOps automations that use shell scripting to orchestrate operations and to provide integration points for external shell-based systems.","title":"console-commands"},{"location":"development/filesystem-api/cypress/","text":"cypress \u00b6 The cypress root contains end-to-end testing assets for the Cypress browser testing framework . It follows the same structure that Cypress\u2019 command-line tooling will generate in a project repository by default. See Cypress\u2019 Folder Structure documentation for details on the semantics of content within this tree.","title":"cypress"},{"location":"development/filesystem-api/cypress/#cypress","text":"The cypress root contains end-to-end testing assets for the Cypress browser testing framework . It follows the same structure that Cypress\u2019 command-line tooling will generate in a project repository by default. See Cypress\u2019 Folder Structure documentation for details on the semantics of content within this tree.","title":"cypress"},{"location":"development/filesystem-api/data-exporters/","text":"data-exporters \u00b6 The data-exporters tree provides endpoints for querying potentially-dynamic data from the site and processing it record-by-record. The /exports web interface provides a menu of available data exporters with query forms and output to streaming CSV. Data warehouse exporters are available as well that can declaratively map output sets and attributes to external PostgreSQL tables and columns.","title":"data-exporters"},{"location":"development/filesystem-api/data-exporters/#data-exporters","text":"The data-exporters tree provides endpoints for querying potentially-dynamic data from the site and processing it record-by-record. The /exports web interface provides a menu of available data exporters with query forms and output to streaming CSV. Data warehouse exporters are available as well that can declaratively map output sets and attributes to external PostgreSQL tables and columns.","title":"data-exporters"},{"location":"development/filesystem-api/docs/","text":"docs \u00b6 The docs root contains documentation content for the project in Markdown format, commonly compiled with MkDocs into a static website. Sites can add files to this tree with any path and name to create arbitrary articles, but the following convention is recommended for typical documentation: getting-started/ : initial setup for a new system usage/ : content for users of the system development/ : content for developers making changes to the system operations/ : content for systems administrators maintaining the system","title":"docs"},{"location":"development/filesystem-api/docs/#docs","text":"The docs root contains documentation content for the project in Markdown format, commonly compiled with MkDocs into a static website. Sites can add files to this tree with any path and name to create arbitrary articles, but the following convention is recommended for typical documentation: getting-started/ : initial setup for a new system usage/ : content for users of the system development/ : content for developers making changes to the system operations/ : content for systems administrators maintaining the system","title":"docs"},{"location":"development/filesystem-api/dwoo-plugins/","text":"dwoo-plugins \u00b6 The dwoo-plugins root provides a way to extend the Dwoo templating language with new functions/plugins that can be called from within any template. Placing a file under this directory is enough to register a new plugin and make it usable, with the filename serving as the function name you can invoke the plugin with inside templates.","title":"dwoo-plugins"},{"location":"development/filesystem-api/dwoo-plugins/#dwoo-plugins","text":"The dwoo-plugins root provides a way to extend the Dwoo templating language with new functions/plugins that can be called from within any template. Placing a file under this directory is enough to register a new plugin and make it usable, with the filename serving as the function name you can invoke the plugin with inside templates.","title":"dwoo-plugins"},{"location":"development/filesystem-api/event-handlers/","text":"event-handlers \u00b6","title":"event-handlers"},{"location":"development/filesystem-api/event-handlers/#event-handlers","text":"","title":"event-handlers"},{"location":"development/filesystem-api/fixtures/","text":"","title":"Fixtures"},{"location":"development/filesystem-api/helm-chart/","text":"","title":"Helm chart"},{"location":"development/filesystem-api/html-templates/","text":"","title":"Html templates"},{"location":"development/filesystem-api/php-classes/","text":"","title":"Php classes"},{"location":"development/filesystem-api/php-config/","text":"","title":"Php config"},{"location":"development/filesystem-api/php-migrations/","text":"","title":"Php migrations"},{"location":"development/filesystem-api/phpunit-tests/","text":"","title":"Phpunit tests"},{"location":"development/filesystem-api/sencha-workspace/","text":"","title":"Sencha workspace"},{"location":"development/filesystem-api/site-root/","text":"","title":"Site root"},{"location":"development/filesystem-api/site-tasks/","text":"","title":"Site tasks"},{"location":"development/getting-started/cbl-webapps/","text":"CBL webapps \u00b6 Running live changes \u00b6 Each frontend Sencha application needs to be built at least once with the Sencha CMD build tool to scaffold/update a set of loader files. After that, you can just edit files the working tree and reload the browser. The two exceptions where you need to build again are changing the list of packages or changing the list of override files. There is a shortcut studio command for building each frontend application: build-enroll-admin build-demos-teacher build-demos-student build-tasks-manager build-tasks-teacher build-tasks-student Once built, the live-editable version of each app can be accessed via the static web server that the studio runs on port 2191 . The backend host must be provided to the apps via the ?apiHost query parameter. Any remote backend with CORS enabled will work, or you can use the local backend: localhost:2191/SlateStudentCompetenciesAdmin/?apiHost=localhost:2190 localhost:2191/SlateDemonstrationsTeacher/?apiHost=localhost:2190 localhost:2191/SlateDemonstrationsStudent/?apiHost=localhost:2190 localhost:2191/SlateTasksManager/?apiHost=localhost:2190 localhost:2191/SlateTasksTeacher/?apiHost=localhost:2190 localhost:2191/SlateTasksStudent/?apiHost=localhost:2190 Working with breakpoints \u00b6 By default, the Sencha framework will automatically append random cache buster values to every loaded .js source. This helps ensures that your latest code always runs, but will also prevent any breakpoints you set from persisting across reloads. With the Disable cache option of the network inspector activated, you can disable this built-in cache buster by appending &cache=1 to the current page\u2019s query string. Connecting to remote server \u00b6 You can connect to any remote slate-cbl instance that has CORS enabled by appending the query parameter apiHost when loading the page. If the remote instance requires HTTPS, append apiSSL=1 as well.","title":"CBL webapps"},{"location":"development/getting-started/cbl-webapps/#cbl-webapps","text":"","title":"CBL webapps"},{"location":"development/getting-started/cbl-webapps/#running-live-changes","text":"Each frontend Sencha application needs to be built at least once with the Sencha CMD build tool to scaffold/update a set of loader files. After that, you can just edit files the working tree and reload the browser. The two exceptions where you need to build again are changing the list of packages or changing the list of override files. There is a shortcut studio command for building each frontend application: build-enroll-admin build-demos-teacher build-demos-student build-tasks-manager build-tasks-teacher build-tasks-student Once built, the live-editable version of each app can be accessed via the static web server that the studio runs on port 2191 . The backend host must be provided to the apps via the ?apiHost query parameter. Any remote backend with CORS enabled will work, or you can use the local backend: localhost:2191/SlateStudentCompetenciesAdmin/?apiHost=localhost:2190 localhost:2191/SlateDemonstrationsTeacher/?apiHost=localhost:2190 localhost:2191/SlateDemonstrationsStudent/?apiHost=localhost:2190 localhost:2191/SlateTasksManager/?apiHost=localhost:2190 localhost:2191/SlateTasksTeacher/?apiHost=localhost:2190 localhost:2191/SlateTasksStudent/?apiHost=localhost:2190","title":"Running live changes"},{"location":"development/getting-started/cbl-webapps/#working-with-breakpoints","text":"By default, the Sencha framework will automatically append random cache buster values to every loaded .js source. This helps ensures that your latest code always runs, but will also prevent any breakpoints you set from persisting across reloads. With the Disable cache option of the network inspector activated, you can disable this built-in cache buster by appending &cache=1 to the current page\u2019s query string.","title":"Working with breakpoints"},{"location":"development/getting-started/cbl-webapps/#connecting-to-remote-server","text":"You can connect to any remote slate-cbl instance that has CORS enabled by appending the query parameter apiHost when loading the page. If the remote instance requires HTTPS, append apiSSL=1 as well.","title":"Connecting to remote server"},{"location":"development/running-tests/e2e/","text":"End-to-end (E2E) testing \u00b6 Cypress is used to provide browser-level full-stack testing. In this project, Cypress gets run within the cypress-workspace holobranch defined at .holo/branch/cypress-workspace/** within the project repository. This allows local test suite additions and overrides to be stacked on top of those provided by parent projects. The base implemenation is published from emergence-skeleton and your local project may have any number of parent projects stacked in between, so there can be many layers contributing to the below content structure. The cypress-workspace holobranch typically copies the following overrides from the local project repository: cypress.json : top-level project configuration for cypress cypress/integrations/**/*.js : additional or overridden test suites cypress/integrations/**/*.json : additional or overridden test suite configurations (provides some flexibility for test suites to support different downstream reskinnings without all their code needing to be duplicated and overridden) cypress/fixtures/** : static content test suites can make use of Less commonly, the following files might also be copied from the local project repository to override the Cypress setup in more depth: cypress/support/index.js : Cypress plugins and additional commands get loaded here for all test suites package.json / package-lock.json : Tracks the Cypress version and those of installed plugin packages Try to avoid having copies of these in local project repositories: cypress/support/commands.js : Base set of additional commands that test suites can rely on. Instead of overridding this file, add additional project-specific commands to some new files under cypress/support and override cypress/support/index.js to load them cypress/plugins/index.js : Base set of automatic environment setup logic Run tests quickly \u00b6 To quickly run the full test suite headlessly, run on the local terminal outside the studio in the root of your local project repository: script/test Run tests interactively \u00b6 To run tests with Cypress\u2019 interactive GUI open, run on the local terminal outside the studio in the root of your local project repository: script/test-interactive This script uses unionfs-fuse to set up a virtual directory mount on your workstation\u2019s filesystem to run Cypress out of. This union mount provides a live workspace where your local project workspace is merged on top of the base set of cypress-workspace content pulled from your parent project. This virtual directory mount gets set up at ${path_to_your_repo}.cypress-workspace/merged and Cypress gets run from there. Changes you save to Cypress content in your local project work tree will immediately be reflected in the merged mount The filesystem events needed to drive auto-reload may not work Exit the Cypress GUI and reload it to thoroughly force your latest content to be used Changes you save to Cypress content in your local merged mount will immediately be reflected back to your local project work tree If parent project content changes / you\u2019ve edited a source config, exit the Cypress GUI and re-run script/test-interactive to restart in a fresh environment Making Cypress auto-reload as you save changes Because filesystem change events from your local project work tree to the merged unionfs that Cypress runs out of don\u2019t always work, work on Cypress tests out of the merged mount instead. Any changes you make will immediately be written to to your local project work tree ready to stage into a git commit, and filesystem change events will fire live for Cypress to auto-reload test suites as you work. The Open in IDE button that Cypress\u2019 main window will how you as you hover over tests in the list can be used to open the copy of the file in the merged mount where changes will trigger auto-reload. Testing against a remote server \u00b6 By setting environment variables before launching the Cypress GUI, the E2E test suite can be configured to execute against a backend studio hosted on a remote machine or server. On the local terminal outside the studio in the root of your local project repository: Set base URL to studo HTTP root reachable from local workstation: export CYPRESS_BASE_URL = 'http://workstation.mydomain:2190' Configure the SSH host that the backend studio is running on: export CYPRESS_STUDIO_SSH = 'workstation.mydomain' Your local terminal must be set up to connect to it without password. Configure the name of the Docker container running the backend studio: export CYPRESS_STUDIO_CONTAINER = 'slate-cbl-studio' Launch the Cypress GUI: script/test-interactive","title":"End-to-end (E2E) testing"},{"location":"development/running-tests/e2e/#end-to-end-e2e-testing","text":"Cypress is used to provide browser-level full-stack testing. In this project, Cypress gets run within the cypress-workspace holobranch defined at .holo/branch/cypress-workspace/** within the project repository. This allows local test suite additions and overrides to be stacked on top of those provided by parent projects. The base implemenation is published from emergence-skeleton and your local project may have any number of parent projects stacked in between, so there can be many layers contributing to the below content structure. The cypress-workspace holobranch typically copies the following overrides from the local project repository: cypress.json : top-level project configuration for cypress cypress/integrations/**/*.js : additional or overridden test suites cypress/integrations/**/*.json : additional or overridden test suite configurations (provides some flexibility for test suites to support different downstream reskinnings without all their code needing to be duplicated and overridden) cypress/fixtures/** : static content test suites can make use of Less commonly, the following files might also be copied from the local project repository to override the Cypress setup in more depth: cypress/support/index.js : Cypress plugins and additional commands get loaded here for all test suites package.json / package-lock.json : Tracks the Cypress version and those of installed plugin packages Try to avoid having copies of these in local project repositories: cypress/support/commands.js : Base set of additional commands that test suites can rely on. Instead of overridding this file, add additional project-specific commands to some new files under cypress/support and override cypress/support/index.js to load them cypress/plugins/index.js : Base set of automatic environment setup logic","title":"End-to-end (E2E) testing"},{"location":"development/running-tests/e2e/#run-tests-quickly","text":"To quickly run the full test suite headlessly, run on the local terminal outside the studio in the root of your local project repository: script/test","title":"Run tests quickly"},{"location":"development/running-tests/e2e/#run-tests-interactively","text":"To run tests with Cypress\u2019 interactive GUI open, run on the local terminal outside the studio in the root of your local project repository: script/test-interactive This script uses unionfs-fuse to set up a virtual directory mount on your workstation\u2019s filesystem to run Cypress out of. This union mount provides a live workspace where your local project workspace is merged on top of the base set of cypress-workspace content pulled from your parent project. This virtual directory mount gets set up at ${path_to_your_repo}.cypress-workspace/merged and Cypress gets run from there. Changes you save to Cypress content in your local project work tree will immediately be reflected in the merged mount The filesystem events needed to drive auto-reload may not work Exit the Cypress GUI and reload it to thoroughly force your latest content to be used Changes you save to Cypress content in your local merged mount will immediately be reflected back to your local project work tree If parent project content changes / you\u2019ve edited a source config, exit the Cypress GUI and re-run script/test-interactive to restart in a fresh environment Making Cypress auto-reload as you save changes Because filesystem change events from your local project work tree to the merged unionfs that Cypress runs out of don\u2019t always work, work on Cypress tests out of the merged mount instead. Any changes you make will immediately be written to to your local project work tree ready to stage into a git commit, and filesystem change events will fire live for Cypress to auto-reload test suites as you work. The Open in IDE button that Cypress\u2019 main window will how you as you hover over tests in the list can be used to open the copy of the file in the merged mount where changes will trigger auto-reload.","title":"Run tests interactively"},{"location":"development/running-tests/e2e/#testing-against-a-remote-server","text":"By setting environment variables before launching the Cypress GUI, the E2E test suite can be configured to execute against a backend studio hosted on a remote machine or server. On the local terminal outside the studio in the root of your local project repository: Set base URL to studo HTTP root reachable from local workstation: export CYPRESS_BASE_URL = 'http://workstation.mydomain:2190' Configure the SSH host that the backend studio is running on: export CYPRESS_STUDIO_SSH = 'workstation.mydomain' Your local terminal must be set up to connect to it without password. Configure the name of the Docker container running the backend studio: export CYPRESS_STUDIO_CONTAINER = 'slate-cbl-studio' Launch the Cypress GUI: script/test-interactive","title":"Testing against a remote server"},{"location":"development/workspace-setup/content-editor/","text":"Content Editor webapp \u00b6 Code layout \u00b6 sencha-workspace/ packages/ emergence-cms/ : Primary location for content editor UI code emr-skeleton-theme/ : The Sencha theme used when rendering the content editor EmergenceContentEditor/ : A thin Sencha application used to make development easier and to provide a build target for generating the theme html-templates/ webapps/EmergenceContentEditor/sencha.tpl : A template for rendering the content editor embedded in the site\u2019s design frame html-templates/blog/blogPostEdit.tpl : A wrapper around sencha.tpl to provide the content editor UI on the blog post edit form html-templates/pages/pageEdit.tpl : A wrapper around sencha.tpl to provide the content editor UI on the page edit form Running live changes \u00b6 The frontend Sencha application needs to be built at least once with the Sencha CMD build tool to scaffold/update a set of loader files. After that, you can just edit files the working tree and reload the browser. The two exceptions where you need to build again are changing the list of packages or changing the list of override files. Before the frontend application can be built to run from live changes, you\u2019ll need to ensure all submodules are initialized: git submodule update --init Then, use the shortcut studio command for building the frontend application: build-content-editor Once built, the live-editable version of the app can be accessed via the static web server that the studio runs on port 2191 . The backend host must be provided to the apps via the ?apiHost query parameter. Any remote backend with CORS enabled will work, or you can use the local backend: localhost:2191/EmergenceContentEditor/?apiHost=localhost:2190 Working with breakpoints \u00b6 By default, the Sencha framework will automatically append random cache buster values to every loaded .js source. This helps ensures that your latest code always runs, but will also prevent any breakpoints you set from persisting across reloads. With the Disable cache option of the network inspector activated, you can disable this built-in cache buster by appending &cache=1 to the current page\u2019s query string. Connecting to remote server \u00b6 You can connect to any remote instance that has CORS enabled by appending the query parameter apiHost when loading the page. If the remote instance requires HTTPS, append apiSSL=1 as well.","title":"Content Editor webapp"},{"location":"development/workspace-setup/content-editor/#content-editor-webapp","text":"","title":"Content Editor webapp"},{"location":"development/workspace-setup/content-editor/#code-layout","text":"sencha-workspace/ packages/ emergence-cms/ : Primary location for content editor UI code emr-skeleton-theme/ : The Sencha theme used when rendering the content editor EmergenceContentEditor/ : A thin Sencha application used to make development easier and to provide a build target for generating the theme html-templates/ webapps/EmergenceContentEditor/sencha.tpl : A template for rendering the content editor embedded in the site\u2019s design frame html-templates/blog/blogPostEdit.tpl : A wrapper around sencha.tpl to provide the content editor UI on the blog post edit form html-templates/pages/pageEdit.tpl : A wrapper around sencha.tpl to provide the content editor UI on the page edit form","title":"Code layout"},{"location":"development/workspace-setup/content-editor/#running-live-changes","text":"The frontend Sencha application needs to be built at least once with the Sencha CMD build tool to scaffold/update a set of loader files. After that, you can just edit files the working tree and reload the browser. The two exceptions where you need to build again are changing the list of packages or changing the list of override files. Before the frontend application can be built to run from live changes, you\u2019ll need to ensure all submodules are initialized: git submodule update --init Then, use the shortcut studio command for building the frontend application: build-content-editor Once built, the live-editable version of the app can be accessed via the static web server that the studio runs on port 2191 . The backend host must be provided to the apps via the ?apiHost query parameter. Any remote backend with CORS enabled will work, or you can use the local backend: localhost:2191/EmergenceContentEditor/?apiHost=localhost:2190","title":"Running live changes"},{"location":"development/workspace-setup/content-editor/#working-with-breakpoints","text":"By default, the Sencha framework will automatically append random cache buster values to every loaded .js source. This helps ensures that your latest code always runs, but will also prevent any breakpoints you set from persisting across reloads. With the Disable cache option of the network inspector activated, you can disable this built-in cache buster by appending &cache=1 to the current page\u2019s query string.","title":"Working with breakpoints"},{"location":"development/workspace-setup/content-editor/#connecting-to-remote-server","text":"You can connect to any remote instance that has CORS enabled by appending the query parameter apiHost when loading the page. If the remote instance requires HTTPS, append apiSSL=1 as well.","title":"Connecting to remote server"},{"location":"development/workspace-setup/local-studio/","text":"Local Studio Container \u00b6 This guide will walk you through launching a Docker-container local development studio and using it to test changes made within a local Git repository. Launch studio container \u00b6 Install Chef Habitat: curl -s https://raw.githubusercontent.com/habitat-sh/habitat/master/components/hab/install.sh | sudo bash Set up Chef Habitat, accepting defaults for all prompts: hab setup Clone slate-cbl repository and any submodules: git clone --recursive git@github.com:SlateFoundation/slate-cbl.git Change into cloned directory: cd ./slate-cbl Launch studio: Use the included scripts-to-rules-them-all workflow script to configure and launch a studio session: script/studio Review the notes printed to your terminal at the end of the studio startup process for a list of all available studio commands. Bootstrap and develop backend \u00b6 Start services: Use the studio command start-all to launch the http server (nginx), the application runtime (php-fpm), and a local mysql server: start-all At this point, you should be able to open localhost:2190 and see the error message Page not found . Build site: To build the entire site and load it, use the studio command update-site : update-site At this point, localhost:2190 should display the current build of the site Load fixture data into site database (optional): load-fixtures The standard fixture data includes the following users: Username Password AccountLevel About system system Developer Full system access admin admin Administrator Manage site and staff teacher teacher Staff Staff access with teaching role in multiple courses sections teacher2 teacher2 Staff Staff access with teaching role in multiple course sections student student User Student user with student role in multiple course sections student2 student2 User Student user with student role in multiple course sections student3 student3 User Student user with no roles in any course sections Make and apply changes: After editing code in the working tree, you must rebuild and update the site: update-site A command to automatically rebuild and update the site as changes are made to the working tree is also available, but currently not that efficient or reliable: watch-site Enable user registration \u00b6 To enable user registration on a site that comes with it disabled: # write class configuring enabling registration mkdir -p php-config/Emergence/People echo '<?php Emergence\\People\\RegistrationRequestHandler::$enableRegistration = true;' > php-config/Emergence/People/RegistrationRequestHandler.config.php # rebuild environment update-site After visiting /register and creating a new user account, you can use the studio command promote-user to upgrade the user account you just registered to the highest access level: promote-user <myuser> Connect to local database \u00b6 The studio container hosts a local MySQL instance that can be connected to at: Host : localhost (or LAN/WAN IP of machine hosting Docker engine) Port : 2196 Username : admin Password : admin","title":"Local Studio Container"},{"location":"development/workspace-setup/local-studio/#local-studio-container","text":"This guide will walk you through launching a Docker-container local development studio and using it to test changes made within a local Git repository.","title":"Local Studio Container"},{"location":"development/workspace-setup/local-studio/#launch-studio-container","text":"Install Chef Habitat: curl -s https://raw.githubusercontent.com/habitat-sh/habitat/master/components/hab/install.sh | sudo bash Set up Chef Habitat, accepting defaults for all prompts: hab setup Clone slate-cbl repository and any submodules: git clone --recursive git@github.com:SlateFoundation/slate-cbl.git Change into cloned directory: cd ./slate-cbl Launch studio: Use the included scripts-to-rules-them-all workflow script to configure and launch a studio session: script/studio Review the notes printed to your terminal at the end of the studio startup process for a list of all available studio commands.","title":"Launch studio container"},{"location":"development/workspace-setup/local-studio/#bootstrap-and-develop-backend","text":"Start services: Use the studio command start-all to launch the http server (nginx), the application runtime (php-fpm), and a local mysql server: start-all At this point, you should be able to open localhost:2190 and see the error message Page not found . Build site: To build the entire site and load it, use the studio command update-site : update-site At this point, localhost:2190 should display the current build of the site Load fixture data into site database (optional): load-fixtures The standard fixture data includes the following users: Username Password AccountLevel About system system Developer Full system access admin admin Administrator Manage site and staff teacher teacher Staff Staff access with teaching role in multiple courses sections teacher2 teacher2 Staff Staff access with teaching role in multiple course sections student student User Student user with student role in multiple course sections student2 student2 User Student user with student role in multiple course sections student3 student3 User Student user with no roles in any course sections Make and apply changes: After editing code in the working tree, you must rebuild and update the site: update-site A command to automatically rebuild and update the site as changes are made to the working tree is also available, but currently not that efficient or reliable: watch-site","title":"Bootstrap and develop backend"},{"location":"development/workspace-setup/local-studio/#enable-user-registration","text":"To enable user registration on a site that comes with it disabled: # write class configuring enabling registration mkdir -p php-config/Emergence/People echo '<?php Emergence\\People\\RegistrationRequestHandler::$enableRegistration = true;' > php-config/Emergence/People/RegistrationRequestHandler.config.php # rebuild environment update-site After visiting /register and creating a new user account, you can use the studio command promote-user to upgrade the user account you just registered to the highest access level: promote-user <myuser>","title":"Enable user registration"},{"location":"development/workspace-setup/local-studio/#connect-to-local-database","text":"The studio container hosts a local MySQL instance that can be connected to at: Host : localhost (or LAN/WAN IP of machine hosting Docker engine) Port : 2196 Username : admin Password : admin","title":"Connect to local database"},{"location":"development/workspace-setup/slate-admin/","text":"SlateAdmin webapp \u00b6 Code layout \u00b6 html-templates/ webapps/SlateAdmin/sencha.tpl : Configuration wrapper for the template that renders the SlateApp when accessed through the site php-classes/ SlateAdmin/ RequestHandler.php : Wrapper that handles authenticating access to SlateAdmin webapp and the loading it WebApp.php : Wrapper SlateAdmin webapp instance that hosts site-level configuration php-config/ Emergence/ WebApps/ App.config.d/ SlateAdmin.php : Registers the SlateAdmin webapp\u2019s custom PHP WebApp wrapper class for its name so that accessing it through /webapps/SlateAdmin will be loaded with the subclass (and the config it hosts) SlateAdmin/ WebApp.config.d/ *.php : Downstream projects can place config snippets here that, for example, register plugins sencha-workspace/ packages/ slate-core-data/ : Shareable model/store/proxy/sorter classes for the Slate namespace slate-theme/ : Shareable theme for Slate apps using the classic UI toolkit slate-ui-classic/ : Shareable UI components for apps using the classic UI toolkit SlateAdmin/ : Entrypoint and all app-specific assets for the SlateAdmin webapp, hosted at /manage on Slate instances site-root/ manage.php : Route that maps /manage to RequestHandler Running live changes \u00b6 The frontend Sencha application needs to be built at least once with the Sencha CMD build tool to scaffold/update a set of loader files. After that, you can just edit files the working tree and reload the browser. The two exceptions where you need to build again are changing the list of packages or changing the list of override files. Before the frontend application can be built to run from live changes, you\u2019ll need to ensure all submodules are initialized: git submodule update --init Then, use the shortcut studio command for building the frontend application: build-admin Once built, the live-editable version of the app can be accessed via the static web server that the studio runs on port 2191 . The backend host must be provided to the apps via the ?apiHost query parameter. Any remote backend with CORS enabled will work, or you can use the local backend: localhost:2191/SlateAdmin/?apiHost=localhost:2190 Working with breakpoints \u00b6 By default, the Sencha framework will automatically append random cache buster values to every loaded .js source. This helps ensures that your latest code always runs, but will also prevent any breakpoints you set from persisting across reloads. With the Disable cache option of the network inspector activated, you can disable this built-in cache buster by appending &cache=1 to the current page\u2019s query string. Connecting to remote server \u00b6 You can connect to any remote instance that has CORS enabled by appending a query parameter in the format ?apiHost=https://slate.example.org when loading the page. A session token may be provided via another query string in the format &apiToken=abcdef1234567890","title":"SlateAdmin webapp"},{"location":"development/workspace-setup/slate-admin/#slateadmin-webapp","text":"","title":"SlateAdmin webapp"},{"location":"development/workspace-setup/slate-admin/#code-layout","text":"html-templates/ webapps/SlateAdmin/sencha.tpl : Configuration wrapper for the template that renders the SlateApp when accessed through the site php-classes/ SlateAdmin/ RequestHandler.php : Wrapper that handles authenticating access to SlateAdmin webapp and the loading it WebApp.php : Wrapper SlateAdmin webapp instance that hosts site-level configuration php-config/ Emergence/ WebApps/ App.config.d/ SlateAdmin.php : Registers the SlateAdmin webapp\u2019s custom PHP WebApp wrapper class for its name so that accessing it through /webapps/SlateAdmin will be loaded with the subclass (and the config it hosts) SlateAdmin/ WebApp.config.d/ *.php : Downstream projects can place config snippets here that, for example, register plugins sencha-workspace/ packages/ slate-core-data/ : Shareable model/store/proxy/sorter classes for the Slate namespace slate-theme/ : Shareable theme for Slate apps using the classic UI toolkit slate-ui-classic/ : Shareable UI components for apps using the classic UI toolkit SlateAdmin/ : Entrypoint and all app-specific assets for the SlateAdmin webapp, hosted at /manage on Slate instances site-root/ manage.php : Route that maps /manage to RequestHandler","title":"Code layout"},{"location":"development/workspace-setup/slate-admin/#running-live-changes","text":"The frontend Sencha application needs to be built at least once with the Sencha CMD build tool to scaffold/update a set of loader files. After that, you can just edit files the working tree and reload the browser. The two exceptions where you need to build again are changing the list of packages or changing the list of override files. Before the frontend application can be built to run from live changes, you\u2019ll need to ensure all submodules are initialized: git submodule update --init Then, use the shortcut studio command for building the frontend application: build-admin Once built, the live-editable version of the app can be accessed via the static web server that the studio runs on port 2191 . The backend host must be provided to the apps via the ?apiHost query parameter. Any remote backend with CORS enabled will work, or you can use the local backend: localhost:2191/SlateAdmin/?apiHost=localhost:2190","title":"Running live changes"},{"location":"development/workspace-setup/slate-admin/#working-with-breakpoints","text":"By default, the Sencha framework will automatically append random cache buster values to every loaded .js source. This helps ensures that your latest code always runs, but will also prevent any breakpoints you set from persisting across reloads. With the Disable cache option of the network inspector activated, you can disable this built-in cache buster by appending &cache=1 to the current page\u2019s query string.","title":"Working with breakpoints"},{"location":"development/workspace-setup/slate-admin/#connecting-to-remote-server","text":"You can connect to any remote instance that has CORS enabled by appending a query parameter in the format ?apiHost=https://slate.example.org when loading the page. A session token may be provided via another query string in the format &apiToken=abcdef1234567890","title":"Connecting to remote server"},{"location":"development/workspace-setup/virtual-multisite/","text":"Virtual Multi-site Container \u00b6 Launch virtual multisite container \u00b6 docker run \\ --name emergence \\ -v emergence:/emergence \\ -p 80 :80 \\ -p 3306 :3306 \\ -p 9083 :9083 \\ jarvus/emergence","title":"Virtual Multi-site Container"},{"location":"development/workspace-setup/virtual-multisite/#virtual-multi-site-container","text":"","title":"Virtual Multi-site Container"},{"location":"development/workspace-setup/virtual-multisite/#launch-virtual-multisite-container","text":"docker run \\ --name emergence \\ -v emergence:/emergence \\ -p 80 :80 \\ -p 3306 :3306 \\ -p 9083 :9083 \\ jarvus/emergence","title":"Launch virtual multisite container"},{"location":"getting-started/","text":"Getting Started \u00b6 The Getting Started section provides content covering: Overviews of the system Obtaining a running instance of the system Configuring a new system for an organization Onboarding new users into the system","title":"Getting Started"},{"location":"getting-started/#getting-started","text":"The Getting Started section provides content covering: Overviews of the system Obtaining a running instance of the system Configuring a new system for an organization Onboarding new users into the system","title":"Getting Started"},{"location":"legacy-docs/","text":"Legacy Docs \u00b6 This section captures legacy documentation that needs to be refactored into the new documentation hierarchy.","title":"Legacy Docs"},{"location":"legacy-docs/#legacy-docs","text":"This section captures legacy documentation that needs to be refactored into the new documentation hierarchy.","title":"Legacy Docs"},{"location":"legacy-docs/GLOSSARY/","text":"Glossary \u00b6 Global Concepts \u00b6 Content Area \u00b6 The highest level of organization in the hierarchy Content areas can be thought of as traditional subject areas like English, Math, or Science as well as skill categories such as Leadership, Interpersonal Communication, or Habits of Success Competency \u00b6 The level in the hierarchy below Content Area but above Standard This bucket organizes the standards below it into groups and categories for easier navigation, access and reporting Standard (aka Skill) \u00b6 The lowest level of the hierarchy below Competency They represent the specific, granular skills that are tracked in the students\u2019 work Often correlate to specific Common Core Standards or other standards bodies Competency Map \u00b6 Spreadsheet file that organizes content areas, competencies and standards for upload into the CBL tool Organized with each content area on a separate worksheet Example of competency map Currently, concrete content areas like English and Math have the same year-over-year competencies and standards with the number of demonstrations required remaining the same at all levels. In the future, standards and number of demonstrations will need to be specified by level. Demonstration \u00b6 A project, piece of work or artifact where students show evidence of competence in one or more competencies Demonstrations can include a single standard, multiple standards within a single content area or competency, or multiple standards across different content areas and competencies The task database extends the demonstration model to support creation up front and assigning Level (aka Portfolio) \u00b6 Students begin each competency on a specific level and progress when the criteria to complete that level has been met Some schools use levels roughly equivalent to traditional grade levels while others set the levels based on a scale independent of grade levels (such as Portfolio years) Future plans: Introduce the ability to set each students\u2019 starting level for each competency independently Continua \u00b6 The level that each standard is rated on Must be developed and defined consistently to ensure consistency across all evaluators (not trivial at all but B21 willingly shares their continua) Ranges from 1-12 for Building21\u2019s model Example of a continua Rating \u00b6 The term rating is used instead of \u201cgrading\u201d when evaluating a demonstration or task Competency Dashboard \u00b6 Evidence Requirements \u00b6 The number of demonstrations required for a specific standard to progress to the next level Set uniquely for each standard in the Competency Map Minimum of one is required but no maximum (typically between 2 and 5) Override \u00b6 Allows a teacher to immediately complete all remaining evidence requirements at the current level of a specific standard for a specific student One of two ways that a standard can be considered complete Not counted in the average score for a given competency Missed demonstration \u00b6 Recorded by selecting the \u201cM\u201d level on the continuum when logging a demonstration Logged when a student had the opportunity to demonstrate a standard but did not address it Typically occurs when a teacher intends for an assignment to cover specific standards and the student does not address that standard in the assignment Minimum passing threshold \u00b6 Within each competency, the average rating required to progress to the next level Currently set globally as X-.5, where X is the current level (e.g. an 8.5 average is required for a level 9 competency) In the future, should be able to set this by individual student and competency Calculated as the average of all the scores that show on the dashboard in a given competency (ie if low level demonstrations are pushed off because higher ones are logged, they do not count towards the average) Task Dashboard \u00b6 Task \u00b6 A type of demonstration that is created before the student submits work Tasks have additional criteria and data associated such as Due Date, Expiration Date, Assignments, Instructions and Attachments Due Date \u00b6 The date the task is due to be sumitted After this date, the task is marked as overdue in the task interface Expiration Date \u00b6 The date a task can no longer be submitted When this date arrives, the submit button is deactivated for students In order to submit after this date, the teacher must change the Expiration date to a date in the future Subtask \u00b6 A task can be a subtask of another task Skills and ratings are kept independently and not rolled up to the parent task Only one level of sub tasks is allowed (no sub-sub tasks) To Do List \u00b6 Student created items that are associated with a specific section or a personal list Portfolio \u00b6 A list of all completed and submitted tasks done by a student The holistic portfolio view aggregates the Past Tasks of each section into a single page","title":"Glossary"},{"location":"legacy-docs/GLOSSARY/#glossary","text":"","title":"Glossary"},{"location":"legacy-docs/GLOSSARY/#global-concepts","text":"","title":"Global Concepts"},{"location":"legacy-docs/GLOSSARY/#content-area","text":"The highest level of organization in the hierarchy Content areas can be thought of as traditional subject areas like English, Math, or Science as well as skill categories such as Leadership, Interpersonal Communication, or Habits of Success","title":"Content Area"},{"location":"legacy-docs/GLOSSARY/#competency","text":"The level in the hierarchy below Content Area but above Standard This bucket organizes the standards below it into groups and categories for easier navigation, access and reporting","title":"Competency"},{"location":"legacy-docs/GLOSSARY/#standard-aka-skill","text":"The lowest level of the hierarchy below Competency They represent the specific, granular skills that are tracked in the students\u2019 work Often correlate to specific Common Core Standards or other standards bodies","title":"Standard (aka Skill)"},{"location":"legacy-docs/GLOSSARY/#competency-map","text":"Spreadsheet file that organizes content areas, competencies and standards for upload into the CBL tool Organized with each content area on a separate worksheet Example of competency map Currently, concrete content areas like English and Math have the same year-over-year competencies and standards with the number of demonstrations required remaining the same at all levels. In the future, standards and number of demonstrations will need to be specified by level.","title":"Competency Map"},{"location":"legacy-docs/GLOSSARY/#demonstration","text":"A project, piece of work or artifact where students show evidence of competence in one or more competencies Demonstrations can include a single standard, multiple standards within a single content area or competency, or multiple standards across different content areas and competencies The task database extends the demonstration model to support creation up front and assigning","title":"Demonstration"},{"location":"legacy-docs/GLOSSARY/#level-aka-portfolio","text":"Students begin each competency on a specific level and progress when the criteria to complete that level has been met Some schools use levels roughly equivalent to traditional grade levels while others set the levels based on a scale independent of grade levels (such as Portfolio years) Future plans: Introduce the ability to set each students\u2019 starting level for each competency independently","title":"Level (aka Portfolio)"},{"location":"legacy-docs/GLOSSARY/#continua","text":"The level that each standard is rated on Must be developed and defined consistently to ensure consistency across all evaluators (not trivial at all but B21 willingly shares their continua) Ranges from 1-12 for Building21\u2019s model Example of a continua","title":"Continua"},{"location":"legacy-docs/GLOSSARY/#rating","text":"The term rating is used instead of \u201cgrading\u201d when evaluating a demonstration or task","title":"Rating"},{"location":"legacy-docs/GLOSSARY/#competency-dashboard","text":"","title":"Competency Dashboard"},{"location":"legacy-docs/GLOSSARY/#evidence-requirements","text":"The number of demonstrations required for a specific standard to progress to the next level Set uniquely for each standard in the Competency Map Minimum of one is required but no maximum (typically between 2 and 5)","title":"Evidence Requirements"},{"location":"legacy-docs/GLOSSARY/#override","text":"Allows a teacher to immediately complete all remaining evidence requirements at the current level of a specific standard for a specific student One of two ways that a standard can be considered complete Not counted in the average score for a given competency","title":"Override"},{"location":"legacy-docs/GLOSSARY/#missed-demonstration","text":"Recorded by selecting the \u201cM\u201d level on the continuum when logging a demonstration Logged when a student had the opportunity to demonstrate a standard but did not address it Typically occurs when a teacher intends for an assignment to cover specific standards and the student does not address that standard in the assignment","title":"Missed demonstration"},{"location":"legacy-docs/GLOSSARY/#minimum-passing-threshold","text":"Within each competency, the average rating required to progress to the next level Currently set globally as X-.5, where X is the current level (e.g. an 8.5 average is required for a level 9 competency) In the future, should be able to set this by individual student and competency Calculated as the average of all the scores that show on the dashboard in a given competency (ie if low level demonstrations are pushed off because higher ones are logged, they do not count towards the average)","title":"Minimum passing threshold"},{"location":"legacy-docs/GLOSSARY/#task-dashboard","text":"","title":"Task Dashboard"},{"location":"legacy-docs/GLOSSARY/#task","text":"A type of demonstration that is created before the student submits work Tasks have additional criteria and data associated such as Due Date, Expiration Date, Assignments, Instructions and Attachments","title":"Task"},{"location":"legacy-docs/GLOSSARY/#due-date","text":"The date the task is due to be sumitted After this date, the task is marked as overdue in the task interface","title":"Due Date"},{"location":"legacy-docs/GLOSSARY/#expiration-date","text":"The date a task can no longer be submitted When this date arrives, the submit button is deactivated for students In order to submit after this date, the teacher must change the Expiration date to a date in the future","title":"Expiration Date"},{"location":"legacy-docs/GLOSSARY/#subtask","text":"A task can be a subtask of another task Skills and ratings are kept independently and not rolled up to the parent task Only one level of sub tasks is allowed (no sub-sub tasks)","title":"Subtask"},{"location":"legacy-docs/GLOSSARY/#to-do-list","text":"Student created items that are associated with a specific section or a personal list","title":"To Do List"},{"location":"legacy-docs/GLOSSARY/#portfolio","text":"A list of all completed and submitted tasks done by a student The holistic portfolio view aggregates the Past Tasks of each section into a single page","title":"Portfolio"},{"location":"legacy-docs/data/","text":"Data \u00b6 ```mermaid classDiagram ContentArea \u2013 Competency Competency \u2013 Skill Student \u2013* StudentCompetency StudentCompetency \u2013 Competency Student \u2013 Demonstration Demonstration \u2013 DemonstrationSkill DemonstrationSkill \u2192 Skill ContentArea : Code ContentArea : Title Competency : Code Competency : Descriptor Competency : Statement Competency : getTotalDemonstrationsRequired([level]) Skill : Code Skill : Descriptor Skill : Statement Skill : DemonstrationsRequired Skill : getDemonstrationsRequiredByLevel(level) Student : Username Student : StudentNumber StudentCompetency : Level StudentCompetency : EnteredVia [enrollment/graduation] StudentCompetency : BaselineRating StudentCompetency : getCompletion() StudentCompetency : getDemonstrationData() StudentCompetency : getEffectiveDemonstrationsData() StudentCompetency : getDemonstrationsLogged() StudentCompetency : getDemonstrationsMissed() StudentCompetency : getDemonstrationsComplete() StudentCompetency : getDemonstrationsAverage() StudentCompetency : isLevelComplete() StudentCompetency : getGrowth() Demonstration : Demonstrated Demonstration : ArtifactURL Demonstration : Comments DemonstrationSkill : Level DemonstrationSkill : Rating DemonstrationSkill : Override [true/false] ```","title":"Data"},{"location":"legacy-docs/data/#data","text":"```mermaid classDiagram ContentArea \u2013 Competency Competency \u2013 Skill Student \u2013* StudentCompetency StudentCompetency \u2013 Competency Student \u2013 Demonstration Demonstration \u2013 DemonstrationSkill DemonstrationSkill \u2192 Skill ContentArea : Code ContentArea : Title Competency : Code Competency : Descriptor Competency : Statement Competency : getTotalDemonstrationsRequired([level]) Skill : Code Skill : Descriptor Skill : Statement Skill : DemonstrationsRequired Skill : getDemonstrationsRequiredByLevel(level) Student : Username Student : StudentNumber StudentCompetency : Level StudentCompetency : EnteredVia [enrollment/graduation] StudentCompetency : BaselineRating StudentCompetency : getCompletion() StudentCompetency : getDemonstrationData() StudentCompetency : getEffectiveDemonstrationsData() StudentCompetency : getDemonstrationsLogged() StudentCompetency : getDemonstrationsMissed() StudentCompetency : getDemonstrationsComplete() StudentCompetency : getDemonstrationsAverage() StudentCompetency : isLevelComplete() StudentCompetency : getGrowth() Demonstration : Demonstrated Demonstration : ArtifactURL Demonstration : Comments DemonstrationSkill : Level DemonstrationSkill : Rating DemonstrationSkill : Override [true/false] ```","title":"Data"},{"location":"legacy-docs/data/content-areas/","text":"Content Areas \u00b6","title":"Content Areas"},{"location":"legacy-docs/data/content-areas/#content-areas","text":"","title":"Content Areas"},{"location":"legacy-docs/data/demonstrations/","text":"Demonstrations \u00b6","title":"Demonstrations"},{"location":"legacy-docs/data/demonstrations/#demonstrations","text":"","title":"Demonstrations"},{"location":"legacy-docs/data/student-competencies/","text":"Student Competencies \u00b6","title":"Student Competencies"},{"location":"legacy-docs/data/student-competencies/#student-competencies","text":"","title":"Student Competencies"},{"location":"legacy-docs/data/tasks/","text":"Tasks \u00b6 ```mermaid classDiagram Task \u2192 Task Task \u2013 TaskSkill TaskSkill \u2192 Skill Task \u2192 StudentTask StudentTask \u2013 StudentTaskSkill StudentTask \u2013 Student StudentTask \u2013 Section StudentTask \u2013 Demonstration StudentTaskSkill \u2192 Skill Task \u2013 TaskAttachment StudentTask \u2013 TaskAttachment Task : Title Task : DueDate Task : ExpirationDate Task : Instructions Task : Shared [course/school/public] Task : Status [private/shared/deleted] StudentTask : ExperienceType StudentTask : DueDate StudentTask : ExpirationDate StudentTask : Status [private/shared/deleted] TaskAttachment : Type [GoogleDriveFile/Link] ```","title":"Tasks"},{"location":"legacy-docs/data/tasks/#tasks","text":"```mermaid classDiagram Task \u2192 Task Task \u2013 TaskSkill TaskSkill \u2192 Skill Task \u2192 StudentTask StudentTask \u2013 StudentTaskSkill StudentTask \u2013 Student StudentTask \u2013 Section StudentTask \u2013 Demonstration StudentTaskSkill \u2192 Skill Task \u2013 TaskAttachment StudentTask \u2013 TaskAttachment Task : Title Task : DueDate Task : ExpirationDate Task : Instructions Task : Shared [course/school/public] Task : Status [private/shared/deleted] StudentTask : ExperienceType StudentTask : DueDate StudentTask : ExpirationDate StudentTask : Status [private/shared/deleted] TaskAttachment : Type [GoogleDriveFile/Link] ```","title":"Tasks"},{"location":"legacy-docs/development/","text":"Development \u00b6","title":"Development"},{"location":"legacy-docs/development/#development","text":"","title":"Development"},{"location":"legacy-docs/development/contributing/","text":"Contributing Improvements \u00b6 Create a new branch for your work named features/XXXX or issues/XXXX based on the latest commit in the develop branch If you have write access to the official SlateFoundation/slate-cbl repository, push your feature/issue branch there, otherwise create a forked repository on GitHub and push your branc to your fork Open a pull request aganist the develop branch in the SlateFoundation/slate-cbl repository Tips for Quality Pull Requests \u00b6 Adhere to Chris Beams\u2019 guide on How to Write a Git Commit Message Describe and link to any relevant issues or materials that prompted the changes Explain any complexity being added that may be non-obvious","title":"Contributing Improvements"},{"location":"legacy-docs/development/contributing/#contributing-improvements","text":"Create a new branch for your work named features/XXXX or issues/XXXX based on the latest commit in the develop branch If you have write access to the official SlateFoundation/slate-cbl repository, push your feature/issue branch there, otherwise create a forked repository on GitHub and push your branc to your fork Open a pull request aganist the develop branch in the SlateFoundation/slate-cbl repository","title":"Contributing Improvements"},{"location":"legacy-docs/development/contributing/#tips-for-quality-pull-requests","text":"Adhere to Chris Beams\u2019 guide on How to Write a Git Commit Message Describe and link to any relevant issues or materials that prompted the changes Explain any complexity being added that may be non-obvious","title":"Tips for Quality Pull Requests"},{"location":"legacy-docs/development/deployment/","text":"Deploying a Release \u00b6","title":"Deploying a Release"},{"location":"legacy-docs/development/deployment/#deploying-a-release","text":"","title":"Deploying a Release"},{"location":"legacy-docs/development/releases/","text":"Making a Release \u00b6 Open a pull request using the releases/v2 branch as a base (the branch being merged into ) and the develop branch as the compared branch (the branch being merged from ) Title the pull request in the format Release: slate-cbl vX.Y.Z , following semantic versioning practices: Increment only the patch number (Z) for bug fixes or minor improvements that do not change expected functionality Increment the minor release number (Y) and reset the patch number (Z) to zero if new features are being added or other changes made that a typical user would want to automatically upgrade to Increment the major release number (X) and reset the other numbers when changes are so significant that an automatic upgrade is not possible, or would not be desirable for typical users Outline with markdown bullet points in the pull request\u2019s description the changes made in the release as the will manifest from a user\u2019s perspective. This outline serves as a draft for the release notes which may ultimately be presented to end users to prepare them for changes in their experience. Review the \u201cFiles changed\u201d tab in GitHub for any unexpected changes or changes that are not yet described by the release notes. Ensure that all status checks for builds and tests are successful Merge the pull request Create a new release For Tag version input the designated release version from the pull request in the format vX.Y.Z (include the v prefix) For Target select the releases/v2 branch For Release title input the project name and version in the format slate-cbl vX.Y.Z (matching the pull request title, but without the Release: prefix) For Describe this release , copy the bullet point release notes drafted in the pull request Click Publish release","title":"Making a Release"},{"location":"legacy-docs/development/releases/#making-a-release","text":"Open a pull request using the releases/v2 branch as a base (the branch being merged into ) and the develop branch as the compared branch (the branch being merged from ) Title the pull request in the format Release: slate-cbl vX.Y.Z , following semantic versioning practices: Increment only the patch number (Z) for bug fixes or minor improvements that do not change expected functionality Increment the minor release number (Y) and reset the patch number (Z) to zero if new features are being added or other changes made that a typical user would want to automatically upgrade to Increment the major release number (X) and reset the other numbers when changes are so significant that an automatic upgrade is not possible, or would not be desirable for typical users Outline with markdown bullet points in the pull request\u2019s description the changes made in the release as the will manifest from a user\u2019s perspective. This outline serves as a draft for the release notes which may ultimately be presented to end users to prepare them for changes in their experience. Review the \u201cFiles changed\u201d tab in GitHub for any unexpected changes or changes that are not yet described by the release notes. Ensure that all status checks for builds and tests are successful Merge the pull request Create a new release For Tag version input the designated release version from the pull request in the format vX.Y.Z (include the v prefix) For Target select the releases/v2 branch For Release title input the project name and version in the format slate-cbl vX.Y.Z (matching the pull request title, but without the Release: prefix) For Describe this release , copy the bullet point release notes drafted in the pull request Click Publish release","title":"Making a Release"},{"location":"legacy-docs/exports/","text":"Data Exports \u00b6 Deprecated exports These exports (under /site-root/cbl/exports/ ) were all removed in slate-cbl#587 in favor of the new upstream pluggable /data-exporters/ tree This doc content should all be adapted/rewritten to the new set of exports under data-exporters/slate-cbl/** Demonstrations-legacy (CSV) \u00b6 Lists all the information entered for a specific demonstration in a single row Includes the continuum level logged for each standard Can be customized through the URL to only include students of specific groups or course sections Example of download URL: /cbl/exports/demonstrations?students=group+class_of_2018 Link to example doc Demonstrations (CSV) \u00b6 Organized with each skill on a separate row so that each demonstration may occpy multiple rows Includes all details for each demonstration as well as the relevant competency, standard, rating and level Example of download URL: /cbl/exports/demonstrations-legacy?students=group+class_of_2018 Competencies (CSV) \u00b6 Organized with each student on a single line Every subject area and competency is represented on the CSV for every student Each competency has columns for Logged (number of demonstrations), Total (total evidence requirements needed to progress) and Average (average score within that competency) Each content area has columns for Logged (total number of demonstrations), Total (total evidence requirements for the entire content area), Missed (total missed demonstrations), and -Average (average score of all competencies) Example of download URL: /cbl/exports/competencies?students=group+class_of_2018 Link to example doc Competencies-details (CSV) \u00b6 Organized with a unique row for each student for each competency (total number of rows for each student equals the total number of active or completed competency portfolio levels) Each competency lists the portfolio level, average performance level, growth, progress %, total evidence requirements, total opportunities, total completed evidence requirements, total rated evidence requirements (non M or Override) and total missed evidence requirements Growth is calculated by including only the skills that have multiple numerical ratings (not M or Override). For each skill, you subtract the oldest from the most recent demonstration and then average this skill growth with all the other skills in that competency and portfolio level that had multiple numerical logs (and thus could calculate growth). Skills that have only one demonstration can not have growth and thus are NULL for growth. If within a competency, only one skill has growth for the given portfolio level, the growth of the competency equals the growth of that one skill. Example of download URL: /cbl/exports/competencies-details?students=group+class_of_2018 Content-areas (CSV) \u00b6 Organized with a unique row for each student for each content area level (total number of rows for each student equals the total number of completed or active content area portfolio levels) Each content area row lists the portfolio level, performance level, growth, progress %, total evidence requirements, total opportunities, completed evidence requirements, rated evidence requirements (non M or Override), and missed evidence requirements Growth is calculated by including only the skills that have two or more numerical ratings (not M or Override). For each skill, you subtract the oldest from the most recent demonstration and then average this skill growth with all the other skills that have growth in the given competency at that level. Then, you average the growth for each competency to calculate the growth for the content area. This means that if a single skill within a competency is the only one that has growth, the growth for that skill is treated as the competency growth and factors strongly into the averaging. If no skill in a competency has growth (they\u2019re all NULL), then the competency growth is NULL and should not count towards the content-area growth average. Example of download URL: /cbl/exports/content-areas?students=group+class_of_2018 Tasks (CSV) \u00b6 Organized with a unique row for each task rated for each student Each row lists the student, their ID, task name, teacher who assigned it, studio, status of the task, due date, expiration date, submitted date and skill codes Example of download URL: /cbl/exports/tasks?students=group+class_of_2018","title":"Data Exports"},{"location":"legacy-docs/exports/#data-exports","text":"Deprecated exports These exports (under /site-root/cbl/exports/ ) were all removed in slate-cbl#587 in favor of the new upstream pluggable /data-exporters/ tree This doc content should all be adapted/rewritten to the new set of exports under data-exporters/slate-cbl/**","title":"Data Exports"},{"location":"legacy-docs/exports/#demonstrations-legacy-csv","text":"Lists all the information entered for a specific demonstration in a single row Includes the continuum level logged for each standard Can be customized through the URL to only include students of specific groups or course sections Example of download URL: /cbl/exports/demonstrations?students=group+class_of_2018 Link to example doc","title":"Demonstrations-legacy (CSV)"},{"location":"legacy-docs/exports/#demonstrations-csv","text":"Organized with each skill on a separate row so that each demonstration may occpy multiple rows Includes all details for each demonstration as well as the relevant competency, standard, rating and level Example of download URL: /cbl/exports/demonstrations-legacy?students=group+class_of_2018","title":"Demonstrations (CSV)"},{"location":"legacy-docs/exports/#competencies-csv","text":"Organized with each student on a single line Every subject area and competency is represented on the CSV for every student Each competency has columns for Logged (number of demonstrations), Total (total evidence requirements needed to progress) and Average (average score within that competency) Each content area has columns for Logged (total number of demonstrations), Total (total evidence requirements for the entire content area), Missed (total missed demonstrations), and -Average (average score of all competencies) Example of download URL: /cbl/exports/competencies?students=group+class_of_2018 Link to example doc","title":"Competencies (CSV)"},{"location":"legacy-docs/exports/#competencies-details-csv","text":"Organized with a unique row for each student for each competency (total number of rows for each student equals the total number of active or completed competency portfolio levels) Each competency lists the portfolio level, average performance level, growth, progress %, total evidence requirements, total opportunities, total completed evidence requirements, total rated evidence requirements (non M or Override) and total missed evidence requirements Growth is calculated by including only the skills that have multiple numerical ratings (not M or Override). For each skill, you subtract the oldest from the most recent demonstration and then average this skill growth with all the other skills in that competency and portfolio level that had multiple numerical logs (and thus could calculate growth). Skills that have only one demonstration can not have growth and thus are NULL for growth. If within a competency, only one skill has growth for the given portfolio level, the growth of the competency equals the growth of that one skill. Example of download URL: /cbl/exports/competencies-details?students=group+class_of_2018","title":"Competencies-details (CSV)"},{"location":"legacy-docs/exports/#content-areas-csv","text":"Organized with a unique row for each student for each content area level (total number of rows for each student equals the total number of completed or active content area portfolio levels) Each content area row lists the portfolio level, performance level, growth, progress %, total evidence requirements, total opportunities, completed evidence requirements, rated evidence requirements (non M or Override), and missed evidence requirements Growth is calculated by including only the skills that have two or more numerical ratings (not M or Override). For each skill, you subtract the oldest from the most recent demonstration and then average this skill growth with all the other skills that have growth in the given competency at that level. Then, you average the growth for each competency to calculate the growth for the content area. This means that if a single skill within a competency is the only one that has growth, the growth for that skill is treated as the competency growth and factors strongly into the averaging. If no skill in a competency has growth (they\u2019re all NULL), then the competency growth is NULL and should not count towards the content-area growth average. Example of download URL: /cbl/exports/content-areas?students=group+class_of_2018","title":"Content-areas (CSV)"},{"location":"legacy-docs/exports/#tasks-csv","text":"Organized with a unique row for each task rated for each student Each row lists the student, their ID, task name, teacher who assigned it, studio, status of the task, due date, expiration date, submitted date and skill codes Example of download URL: /cbl/exports/tasks?students=group+class_of_2018","title":"Tasks (CSV)"},{"location":"legacy-docs/logic/","text":"Logic \u00b6 TODO: insert screenshots of competency dashboard with logic annotated as demonstrations, missed demonstrations, and overrides get added","title":"Logic"},{"location":"legacy-docs/logic/#logic","text":"TODO: insert screenshots of competency dashboard with logic annotated as demonstrations, missed demonstrations, and overrides get added","title":"Logic"},{"location":"legacy-docs/logic/growth/","text":"Growth \u00b6 Baseline Rating \u00b6 Baseline ratings are stored on the StudentCompetency model, and can come to be set three ways: In bulk via the enrollment tool From the average of the previous level during auto-graduation If no baseline is otherwise set by the time at least one rating is available for every skill, the average of the earliest rating in each skill is saved as the baseline Skill Growth \u00b6 If a baseline rating is available, growth for each skill is calculated as the difference between the baseline rating and the most recent rating for that skill. If no baseline rating is available, growth is calculated as the difference between the oldest and most recent rating. If no baseline or less than two ratings are available for a given skill, no growth calculation is available. Missed and overridden skill demonstrations are filtered out before any growth calculations are made. Competency Growth \u00b6 If at least half the skills in a competency have growth calculations available, growth for the competency is calculated as the average of available skill growth calculations. Content Area Growth \u00b6 If at least one competency has a growth calculation available, growth for the content area is calculated as the average of all available competency growth calculations.","title":"Growth"},{"location":"legacy-docs/logic/growth/#growth","text":"","title":"Growth"},{"location":"legacy-docs/logic/growth/#baseline-rating","text":"Baseline ratings are stored on the StudentCompetency model, and can come to be set three ways: In bulk via the enrollment tool From the average of the previous level during auto-graduation If no baseline is otherwise set by the time at least one rating is available for every skill, the average of the earliest rating in each skill is saved as the baseline","title":"Baseline Rating"},{"location":"legacy-docs/logic/growth/#skill-growth","text":"If a baseline rating is available, growth for each skill is calculated as the difference between the baseline rating and the most recent rating for that skill. If no baseline rating is available, growth is calculated as the difference between the oldest and most recent rating. If no baseline or less than two ratings are available for a given skill, no growth calculation is available. Missed and overridden skill demonstrations are filtered out before any growth calculations are made.","title":"Skill Growth"},{"location":"legacy-docs/logic/growth/#competency-growth","text":"If at least half the skills in a competency have growth calculations available, growth for the competency is calculated as the average of available skill growth calculations.","title":"Competency Growth"},{"location":"legacy-docs/logic/growth/#content-area-growth","text":"If at least one competency has a growth calculation available, growth for the content area is calculated as the average of all available competency growth calculations.","title":"Content Area Growth"},{"location":"legacy-docs/logic/missed-demonstrations/","text":"Missed Demonstrations \u00b6 The number of missed demonstrations for a given student+skill is calculated as follows: If any override is logged for the given student+skill, 0 missed demonstrations are reported, regardless of any missed demonstrations that may have been logged before the override. Count the number of missed demonstrations logged. Missed demonstrations are stored like normal demonstrations but with DemonstratedLevel equal to the special value 0 . If any demonstrations are logged for the given skill where DemonstratedLevel does not equal 0 , even those below TargetLevel , these are subtracted from the number of demonstrations required for the given skill to obtain the remaining number of demonstrations required. If there are more missed demonstrations logged than the number produced by step #3, the lesser number is reported.","title":"Missed Demonstrations"},{"location":"legacy-docs/logic/missed-demonstrations/#missed-demonstrations","text":"The number of missed demonstrations for a given student+skill is calculated as follows: If any override is logged for the given student+skill, 0 missed demonstrations are reported, regardless of any missed demonstrations that may have been logged before the override. Count the number of missed demonstrations logged. Missed demonstrations are stored like normal demonstrations but with DemonstratedLevel equal to the special value 0 . If any demonstrations are logged for the given skill where DemonstratedLevel does not equal 0 , even those below TargetLevel , these are subtracted from the number of demonstrations required for the given skill to obtain the remaining number of demonstrations required. If there are more missed demonstrations logged than the number produced by step #3, the lesser number is reported.","title":"Missed Demonstrations"},{"location":"legacy-docs/logic/student-competency-calculations/","text":"Student Competency Functions \u00b6 Method Name Description Output getDemonstrationData Get demonstrations, grouped by SkillID and ordered by DemonstrationDate and DemonstrationID Array of demonstrations getDemonstrationOpportunities Equal to the total amount of non-Override demonstrations found in getDemonstrationData Array of demonstrations sortDemonstrations Demonstrations are sorted by their ID Array of demonstrations sortEffectiveDemonstrations Sort demonstrations by DemonstratedLevel , or by the sortDemonstrations method if the demonstrations have the same DemonstratedLevel Array of demonstrations getEffectiveDemonstrationsData Sort getDemonstrationData via sortEffectiveDemonstrations . Reduce the number of demonstrations to the amount of demonstrations required for the respective Level . Sort the demonstrations again via sortDemonstrations Array of demonstrations getDemonstrationsLogged Get demonstrations via getEffectiveDemonstrationsData . Exclude Overrides and records that do not have a DemonstratedLevel . Total of demonstrations found getDemonstrationsMissed Get demonstrations via getEffectiveDemonstrationsData . Exclude Overrides and records that have a DemonstratedLevel Total of demonstrations found getDemonstrationsComplete Get demonstrations via getEffectiveDemonstrationsData . If DemonstratedLevel is set, Increase the total by 1 . If record is an Override , Increase the total by the amount of demonstrations required for the respective Skill Level (via Skill::getDemonstrationsRequiredByLevel() ). If the Demonstration is an Override , equal to the the amount of skills required for that demonstration. Total of demonstrations completed getDemonstrationsAverage Equal to the total of DemonstratedLevel for demonstrations via getEffectiveDemonstrations that are not an Override , divided by the amount of demonstrations via getDemonstrationsLogged . ( There must be at least one demonstration logged. ) Average DemonstratedLevel for demonstrations getDemonstrationsRequired Get demonstrations required for the respective Competency and Level Total of demonstrations required getMinimumAverage Get minimum average rating for the respective Level . This can be implemented in the following ways. Implementation will vary based on Slate configuration. Either: Hard-coded array of Levels mapped to the custom Minimum Average OR Hard-coded function that can determine the Minimum Average based on the StudentCompetency OR Hard-coded Minimum Average value. Minimum Average Rating getMinimumRating Get minimum rating for the respective Level . This can be implemented in the following ways. Implementation will vary based on Slate configuration. Either: Hard-coded array of Levels mapped to the custom Minimum Rating OR Hard-coded function that can determine the Minimum Rating based on the StudentCompetency OR Hard-coded Minimum Rating value Minimum Rating isLevelComplete Determine if the respective Level is completed by: Getting the total of demonstrations (Evidence Required) for the respective Competency and confirming that The amount of demonstrations completed (via getDemonstrationsCompleted ) is greater than or equal to the amount of Evidence Required AND The average demonstration rating (via getDemonstrationsAverage ) is greater than or equal to the minimum average (via getMinimumAverage ) AND All ratings (via getEffectiveDemonstrations ) are above the minimum rating (via getMinimumRating ). Custom Level Is Complete function that determines if the level is completed for the given StudentCompetency Implementation will vary based on Slate configuration. True or False","title":"Student Competency Functions"},{"location":"legacy-docs/logic/student-competency-calculations/#student-competency-functions","text":"Method Name Description Output getDemonstrationData Get demonstrations, grouped by SkillID and ordered by DemonstrationDate and DemonstrationID Array of demonstrations getDemonstrationOpportunities Equal to the total amount of non-Override demonstrations found in getDemonstrationData Array of demonstrations sortDemonstrations Demonstrations are sorted by their ID Array of demonstrations sortEffectiveDemonstrations Sort demonstrations by DemonstratedLevel , or by the sortDemonstrations method if the demonstrations have the same DemonstratedLevel Array of demonstrations getEffectiveDemonstrationsData Sort getDemonstrationData via sortEffectiveDemonstrations . Reduce the number of demonstrations to the amount of demonstrations required for the respective Level . Sort the demonstrations again via sortDemonstrations Array of demonstrations getDemonstrationsLogged Get demonstrations via getEffectiveDemonstrationsData . Exclude Overrides and records that do not have a DemonstratedLevel . Total of demonstrations found getDemonstrationsMissed Get demonstrations via getEffectiveDemonstrationsData . Exclude Overrides and records that have a DemonstratedLevel Total of demonstrations found getDemonstrationsComplete Get demonstrations via getEffectiveDemonstrationsData . If DemonstratedLevel is set, Increase the total by 1 . If record is an Override , Increase the total by the amount of demonstrations required for the respective Skill Level (via Skill::getDemonstrationsRequiredByLevel() ). If the Demonstration is an Override , equal to the the amount of skills required for that demonstration. Total of demonstrations completed getDemonstrationsAverage Equal to the total of DemonstratedLevel for demonstrations via getEffectiveDemonstrations that are not an Override , divided by the amount of demonstrations via getDemonstrationsLogged . ( There must be at least one demonstration logged. ) Average DemonstratedLevel for demonstrations getDemonstrationsRequired Get demonstrations required for the respective Competency and Level Total of demonstrations required getMinimumAverage Get minimum average rating for the respective Level . This can be implemented in the following ways. Implementation will vary based on Slate configuration. Either: Hard-coded array of Levels mapped to the custom Minimum Average OR Hard-coded function that can determine the Minimum Average based on the StudentCompetency OR Hard-coded Minimum Average value. Minimum Average Rating getMinimumRating Get minimum rating for the respective Level . This can be implemented in the following ways. Implementation will vary based on Slate configuration. Either: Hard-coded array of Levels mapped to the custom Minimum Rating OR Hard-coded function that can determine the Minimum Rating based on the StudentCompetency OR Hard-coded Minimum Rating value Minimum Rating isLevelComplete Determine if the respective Level is completed by: Getting the total of demonstrations (Evidence Required) for the respective Competency and confirming that The amount of demonstrations completed (via getDemonstrationsCompleted ) is greater than or equal to the amount of Evidence Required AND The average demonstration rating (via getDemonstrationsAverage ) is greater than or equal to the minimum average (via getMinimumAverage ) AND All ratings (via getEffectiveDemonstrations ) are above the minimum rating (via getMinimumRating ). Custom Level Is Complete function that determines if the level is completed for the given StudentCompetency Implementation will vary based on Slate configuration. True or False","title":"Student Competency Functions"},{"location":"legacy-docs/setup/","text":"","title":"Index"},{"location":"legacy-docs/setup/importing-competency-maps/","text":"Importing Competency Maps \u00b6 Clone and Customize Sample Spreadsheet \u00b6 Build CSV Index \u00b6 Import into Slate \u00b6 Visit /connectors/cbl-maps in a web browser on your Slate instance Click Synchronize to open the synchronization tool Paste the CSV URL for your index sheet into the Map Index CSV field* Run the synchronization with Pretend enabled first to preview the changes to be made. If everything looks good, use your browser\u2019s back button to return to the setup form. Uncheck Pretend and run again with the same settings. * The default Maps Index CSV can be changed to save yours by creating a file called php-config/Slate/CBL/MapsConnector.config.php : <?php Slate\\CBL\\MapsConnector :: $defaultCsvUrl = 'https://docs.google.com/spreadsheets/.../export?format=csv&id=...&gid=...' ;","title":"Importing Competency Maps"},{"location":"legacy-docs/setup/importing-competency-maps/#importing-competency-maps","text":"","title":"Importing Competency Maps"},{"location":"legacy-docs/setup/importing-competency-maps/#clone-and-customize-sample-spreadsheet","text":"","title":"Clone and Customize Sample Spreadsheet"},{"location":"legacy-docs/setup/importing-competency-maps/#build-csv-index","text":"","title":"Build CSV Index"},{"location":"legacy-docs/setup/importing-competency-maps/#import-into-slate","text":"Visit /connectors/cbl-maps in a web browser on your Slate instance Click Synchronize to open the synchronization tool Paste the CSV URL for your index sheet into the Map Index CSV field* Run the synchronization with Pretend enabled first to preview the changes to be made. If everything looks good, use your browser\u2019s back button to return to the setup form. Uncheck Pretend and run again with the same settings. * The default Maps Index CSV can be changed to save yours by creating a file called php-config/Slate/CBL/MapsConnector.config.php : <?php Slate\\CBL\\MapsConnector :: $defaultCsvUrl = 'https://docs.google.com/spreadsheets/.../export?format=csv&id=...&gid=...' ;","title":"Import into Slate"},{"location":"legacy-docs/user_interfaces/","text":"User Interfaces \u00b6 Phase 1 focused on the development of competency dashboards. Phase 2 focuses on task management. Each of these efforts requires a separate interface for students and teachers. The information below","title":"User Interfaces"},{"location":"legacy-docs/user_interfaces/#user-interfaces","text":"Phase 1 focused on the development of competency dashboards. Phase 2 focuses on task management. Each of these efforts requires a separate interface for students and teachers. The information below","title":"User Interfaces"},{"location":"legacy-docs/user_interfaces/competencies/","text":"Competency Overview \u00b6 Demonstrations that show in the grid \u00b6 Demonstrations fill left to right based on the date logged When empty cells remain, all logged demonstrations (whether a number or M) fill the next empty cell moving left to right The top X scores show for each standard where X is the number of evidence requirements for that standard If multiple equivalent scores exceed the number of demonstrations required, the most recent score should be shown If X scores have not been logged, Missed Demonstrations appear at the end -Lower scores and Ms are replaced when higher scores are logged Completion progress of each competency \u00b6 Calculated as total demonstrations counted towards each standards\u2019 completion divided by total demonstrations required for the entire competency For each standard, the maximum demonstrations counted towards completion of the competency is the total number of evidence requirements for that standard Average score in a competency \u00b6 Calculated as the average of the top X logged demonstrations for each standard where X is the number of evidence requirements for each standard Once a competency is 50% complete, if the average score is below the minimum passing threshold, the average score remains fixed in the cell with a red notation behind it Overrides do not count towards a competency average and should be ignored. This means that if an Override serves to complete multiple demonstrations, the denominator of the average is reduced by the number of demonstrations that override counts for. Progressing to the next competency level \u00b6 Student earns completion record for competency when they meet these two conditions Have at least the minimum number of demonstrations logged for each of that competency standards The average score across all standards in that competency is at least X-.5 where X is the current level (e.g. 8.5 minimum average for level 9) In the future, growth criteria should be added as an alternative promotion metric where growth is calculated as the average of the most recent demonstration for each standard minus the average of the first demonstration for each standard","title":"Competency Overview"},{"location":"legacy-docs/user_interfaces/competencies/#competency-overview","text":"","title":"Competency Overview"},{"location":"legacy-docs/user_interfaces/competencies/#demonstrations-that-show-in-the-grid","text":"Demonstrations fill left to right based on the date logged When empty cells remain, all logged demonstrations (whether a number or M) fill the next empty cell moving left to right The top X scores show for each standard where X is the number of evidence requirements for that standard If multiple equivalent scores exceed the number of demonstrations required, the most recent score should be shown If X scores have not been logged, Missed Demonstrations appear at the end -Lower scores and Ms are replaced when higher scores are logged","title":"Demonstrations that show in the grid"},{"location":"legacy-docs/user_interfaces/competencies/#completion-progress-of-each-competency","text":"Calculated as total demonstrations counted towards each standards\u2019 completion divided by total demonstrations required for the entire competency For each standard, the maximum demonstrations counted towards completion of the competency is the total number of evidence requirements for that standard","title":"Completion progress of each competency"},{"location":"legacy-docs/user_interfaces/competencies/#average-score-in-a-competency","text":"Calculated as the average of the top X logged demonstrations for each standard where X is the number of evidence requirements for each standard Once a competency is 50% complete, if the average score is below the minimum passing threshold, the average score remains fixed in the cell with a red notation behind it Overrides do not count towards a competency average and should be ignored. This means that if an Override serves to complete multiple demonstrations, the denominator of the average is reduced by the number of demonstrations that override counts for.","title":"Average score in a competency"},{"location":"legacy-docs/user_interfaces/competencies/#progressing-to-the-next-competency-level","text":"Student earns completion record for competency when they meet these two conditions Have at least the minimum number of demonstrations logged for each of that competency standards The average score across all standards in that competency is at least X-.5 where X is the current level (e.g. 8.5 minimum average for level 9) In the future, growth criteria should be added as an alternative promotion metric where growth is calculated as the average of the most recent demonstration for each standard minus the average of the first demonstration for each standard","title":"Progressing to the next competency level"},{"location":"legacy-docs/user_interfaces/competencies/students/","text":"Student Competency Dashboard \u00b6 Recent Progress \u00b6 The 10 most recent demonstrations logged for that student are shown Data shown includes: competency, standard, teacher that logged it, and continuum level logged Graduation Progress \u00b6 Calculated through a formula pre-determined by the school Requires definition of the specific courses required for graduation and mapping each to a group of standards that serves as the equivalent","title":"Student Competency Dashboard"},{"location":"legacy-docs/user_interfaces/competencies/students/#student-competency-dashboard","text":"","title":"Student Competency Dashboard"},{"location":"legacy-docs/user_interfaces/competencies/students/#recent-progress","text":"The 10 most recent demonstrations logged for that student are shown Data shown includes: competency, standard, teacher that logged it, and continuum level logged","title":"Recent Progress"},{"location":"legacy-docs/user_interfaces/competencies/students/#graduation-progress","text":"Calculated through a formula pre-determined by the school Requires definition of the specific courses required for graduation and mapping each to a group of standards that serves as the equivalent","title":"Graduation Progress"},{"location":"legacy-docs/user_interfaces/competencies/teachers/","text":"Teacher Competency Dashboard \u00b6 Selecting a Student Group \u00b6 The drop down menu \u201cStudents\u201d produces a menu of all course sections and groups in Slate When selected, the students assigned to the given course section or group populate the x axis The list of students sorts alphabetically by last name, first name, and is scrollable left and right Selecting a Content Area \u00b6 The drop down menu \u201cContent Area\u201d produces a list of all content areas uploaded from the Competency Map during setup The selected content area populates the y axis with the competencies and standards under that content area Logging a Demonstration \u00b6 The \u201cLog a Demonstration\u201d window can be initiated from the teacher view or within a Skill Overview window Teachers can log demonstrations within one competency or multiple competencies at the same time Teachers can rate one or more standards within each competency Student, Type of Context, Experience and Performance Task are required fields Artifact (URL) and notes are optional fields Next Student button \u00b6 This feature allows teachers to quickly evaluate multiple students that have submitted similar projects or assignments without having to reload the details and competencies multiple times When selected, after submitting the demonstration, the Student field changes to the next student (alphabetically) in the loaded group or course section After moving to the next student, the following fields are retained: Type of Performance, Context, Performance Task, selected competencies and standards evaluated Reset artifact URL, comments, and selected levels Override \u00b6 For students performing well above their current level on a specific standard, teachers can override the remaining demonstrations required and complete that standard for a specific student The remaining empty cells in that standard fill in as completed with the current level\u2019s color and are marked with an O rather than the evaluated level If an M is present in the standard, the M is replaced with a completed O cell in the gridview, in the detail view the M is still visible. Overrides have a DemosntratedLevel equal to the TargetLevel (the current portfolio) but do not factor into competency averages.","title":"Teacher Competency Dashboard"},{"location":"legacy-docs/user_interfaces/competencies/teachers/#teacher-competency-dashboard","text":"","title":"Teacher Competency Dashboard"},{"location":"legacy-docs/user_interfaces/competencies/teachers/#selecting-a-student-group","text":"The drop down menu \u201cStudents\u201d produces a menu of all course sections and groups in Slate When selected, the students assigned to the given course section or group populate the x axis The list of students sorts alphabetically by last name, first name, and is scrollable left and right","title":"Selecting a Student Group"},{"location":"legacy-docs/user_interfaces/competencies/teachers/#selecting-a-content-area","text":"The drop down menu \u201cContent Area\u201d produces a list of all content areas uploaded from the Competency Map during setup The selected content area populates the y axis with the competencies and standards under that content area","title":"Selecting a Content Area"},{"location":"legacy-docs/user_interfaces/competencies/teachers/#logging-a-demonstration","text":"The \u201cLog a Demonstration\u201d window can be initiated from the teacher view or within a Skill Overview window Teachers can log demonstrations within one competency or multiple competencies at the same time Teachers can rate one or more standards within each competency Student, Type of Context, Experience and Performance Task are required fields Artifact (URL) and notes are optional fields","title":"Logging a Demonstration"},{"location":"legacy-docs/user_interfaces/competencies/teachers/#next-student-button","text":"This feature allows teachers to quickly evaluate multiple students that have submitted similar projects or assignments without having to reload the details and competencies multiple times When selected, after submitting the demonstration, the Student field changes to the next student (alphabetically) in the loaded group or course section After moving to the next student, the following fields are retained: Type of Performance, Context, Performance Task, selected competencies and standards evaluated Reset artifact URL, comments, and selected levels","title":"Next Student button"},{"location":"legacy-docs/user_interfaces/competencies/teachers/#override","text":"For students performing well above their current level on a specific standard, teachers can override the remaining demonstrations required and complete that standard for a specific student The remaining empty cells in that standard fill in as completed with the current level\u2019s color and are marked with an O rather than the evaluated level If an M is present in the standard, the M is replaced with a completed O cell in the gridview, in the detail view the M is still visible. Overrides have a DemosntratedLevel equal to the TargetLevel (the current portfolio) but do not factor into competency averages.","title":"Override"},{"location":"legacy-docs/user_interfaces/tasks/","text":"Task Management \u00b6 The second phase the CBL product is the creation of a task management system that allows teachers to create tasks that they assign to students. Students view information about the tasks such as due dates, skills associated and instructions as well as submit finished tasks to teachers for rating.","title":"Task Management"},{"location":"legacy-docs/user_interfaces/tasks/#task-management","text":"The second phase the CBL product is the creation of a task management system that allows teachers to create tasks that they assign to students. Students view information about the tasks such as due dates, skills associated and instructions as well as submit finished tasks to teachers for rating.","title":"Task Management"},{"location":"legacy-docs/user_interfaces/tasks/database/","text":"Task Database \u00b6 A collection of saved tasks intended to be used in the future Creation \u00b6 Tasks can be created directly in the task database or through saving a task created in the Task Management interface Due dates, expiration dates and assignments DO NOT occcur in the task database, but other relevant context for the task such as its parent, the type of experience, creator, date, links, instructions and skills associated are entered. Editing tasks done only through the Task Database, not in the Teacher Task Dashboard. When creating a task in the Task Database, other existing tasks are not selectable for prepopulation or overriding.","title":"Task Database"},{"location":"legacy-docs/user_interfaces/tasks/database/#task-database","text":"A collection of saved tasks intended to be used in the future","title":"Task Database"},{"location":"legacy-docs/user_interfaces/tasks/database/#creation","text":"Tasks can be created directly in the task database or through saving a task created in the Task Management interface Due dates, expiration dates and assignments DO NOT occcur in the task database, but other relevant context for the task such as its parent, the type of experience, creator, date, links, instructions and skills associated are entered. Editing tasks done only through the Task Database, not in the Teacher Task Dashboard. When creating a task in the Task Database, other existing tasks are not selectable for prepopulation or overriding.","title":"Creation"},{"location":"legacy-docs/user_interfaces/tasks/students/","text":"Student Task Management \u00b6 Current Tasks \u00b6 Initially presented as a single stream of all tasks for all sections Filtering available by section, due dates, and task status Task details can be opened by clicking the task in the Current Tasks list Once a task is completed, the task is removed from the Current Tasks list and moved to the Past Tasks (Portfolio) section To Do List \u00b6 Student created list of items to do Due dates optionally set by students When completed, To Do items move to the Completed Items seciton Clearing completed items occurs one at a time or thourgh the Clear All button Past Tasks \u00b6 Summary of all completed and rated tasks for a given section Specifies the number of skills associated with a given task and how many were rated on and below the current level for that skill Submitting a Task \u00b6 After opening a task, students can view all relvant information as well as add links and attachments When ready, students submit the task and any associated documents to a teacher for rating State flow \u00b6 ```mermaid graph TD VIEW_MAIN[Dashboard View] 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 NAV_USER_HASH --> | Browser - driven navigation | ROUTER NAV_ROUTER_HASH --> | App - driven navigation | ROUTER CTRL_DASH_ROUTER --> | \"setStudent(...)\" | VIEW_MAIN CTRL_DASH_ROUTER --> | \"setSection(...)\" | VIEW_MAIN VIEW_MAIN - . -> | \"control: { studentchange }\" | CTRL_DASH_CHANGE VIEW_MAIN - . -> | \"control: { sectionchange }\" | CTRL_DASH_CHANGE VIEW_MAIN - . -> | \"control: { studentchange }\" | CTRL_TASKS VIEW_MAIN - . -> | \"control: { sectionchange }\" | CTRL_TASKS VIEW_MAIN - . -> | \"control: { studentchange }\" | CTRL_TODOS VIEW_MAIN - . -> | \"control: { sectionchange }\" | CTRL_TODOS subgraph User navigates via browser NAV_USER_HASH > Browser Address Bar ] end subgraph User navigates via UI components NAV_STUDENT_IN > Student Selector ] NAV_SECTION_IN > Section Selector ] CTRL_MAIN_NAV ( \" Dashboard Controller < code > < li > onStudentSelectorSelect </ li > < li > onStudentSelectorClear </ li > < li > onSectionSelectorSelect </ li > < li > onSectionSelectorClear </ li > </ code > \") NAV_STUDENT_IN - . -> | select | CTRL_MAIN_NAV NAV_STUDENT_IN - . -> | clear | CTRL_MAIN_NAV NAV_SECTION_IN - . -> | select | CTRL_MAIN_NAV NAV_SECTION_IN - . -> | clear | CTRL_MAIN_NAV CTRL_MAIN_NAV --> | \"redirectTo(...)\" | NAV_ROUTER_HASH end subgraph Route parameters applied to top - level view state NAV_ROUTER_HASH > Browser Address Bar ] ROUTER ( Ext . app . route . Router ) CTRL_DASH_ROUTER ( \" Dashboard Controller < code > < li > showDashboard ( studentUsername , sectionCode ) </ li > </ code > \") ROUTER --> | \"routes: { ':studentUsername/:sectionCode' }\" | CTRL_DASH_ROUTER end subgraph New state propagates throughout application CTRL_TASKS ( \" Tasks Controller < code > < li > onStudentChange </ li > < li > onSectionChange </ li > </ code > \") CTRL_TODOS ( \" Todos Controller < code > < li > onStudentChange </ li > < li > onSectionChange </ li > </ code > \") STORE_TASKS (( Tasks Store )) STORE_TODOS (( Todos Store )) VIEW_TASKS [ Tasks View ] VIEW_TODOS [ Todos View ] CTRL_TASKS --> | \"setReadOnly(...)\" | VIEW_TASKS CTRL_TASKS --> | \"setStudent(...)\" | STORE_TASKS CTRL_TASKS --> | \"setSection(...)\" | STORE_TASKS CTRL_TODOS --> | \"setReadOnly(...)\" | VIEW_TODOS CTRL_TODOS --> | \"setStudent(...)\" | STORE_TODOS CTRL_TODOS --> | \"setSection(...)\" | STORE_TODOS STORE_TASKS - . -> | data events | VIEW_TASKS STORE_TODOS - . -> | data events | VIEW_TODOS VIEW_TASKS - . -> | User Intents | CTRL_TASKS VIEW_TODOS - . -> | User Intents | CTRL_TODOS end subgraph New state reflected back to all navigation UI CTRL_DASH_CHANGE ( \" Dashboard Controller < code > < li > onStudentChange </ li > < li > onSectionChange </ li > </ code > \") NAV_STUDENT_OUT > Student Selector ] NAV_SECTION_OUT > Section Selector ] CTRL_DASH_CHANGE --> | \"setValue(...)\" | NAV_STUDENT_OUT CTRL_DASH_CHANGE --> | \"setValue(...)\" | NAV_SECTION_OUT end ```","title":"Student Task Management"},{"location":"legacy-docs/user_interfaces/tasks/students/#student-task-management","text":"","title":"Student Task Management"},{"location":"legacy-docs/user_interfaces/tasks/students/#current-tasks","text":"Initially presented as a single stream of all tasks for all sections Filtering available by section, due dates, and task status Task details can be opened by clicking the task in the Current Tasks list Once a task is completed, the task is removed from the Current Tasks list and moved to the Past Tasks (Portfolio) section","title":"Current Tasks"},{"location":"legacy-docs/user_interfaces/tasks/students/#to-do-list","text":"Student created list of items to do Due dates optionally set by students When completed, To Do items move to the Completed Items seciton Clearing completed items occurs one at a time or thourgh the Clear All button","title":"To Do List"},{"location":"legacy-docs/user_interfaces/tasks/students/#past-tasks","text":"Summary of all completed and rated tasks for a given section Specifies the number of skills associated with a given task and how many were rated on and below the current level for that skill","title":"Past Tasks"},{"location":"legacy-docs/user_interfaces/tasks/students/#submitting-a-task","text":"After opening a task, students can view all relvant information as well as add links and attachments When ready, students submit the task and any associated documents to a teacher for rating","title":"Submitting a Task"},{"location":"legacy-docs/user_interfaces/tasks/students/#state-flow","text":"```mermaid graph TD VIEW_MAIN[Dashboard View] 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 NAV_USER_HASH --> | Browser - driven navigation | ROUTER NAV_ROUTER_HASH --> | App - driven navigation | ROUTER CTRL_DASH_ROUTER --> | \"setStudent(...)\" | VIEW_MAIN CTRL_DASH_ROUTER --> | \"setSection(...)\" | VIEW_MAIN VIEW_MAIN - . -> | \"control: { studentchange }\" | CTRL_DASH_CHANGE VIEW_MAIN - . -> | \"control: { sectionchange }\" | CTRL_DASH_CHANGE VIEW_MAIN - . -> | \"control: { studentchange }\" | CTRL_TASKS VIEW_MAIN - . -> | \"control: { sectionchange }\" | CTRL_TASKS VIEW_MAIN - . -> | \"control: { studentchange }\" | CTRL_TODOS VIEW_MAIN - . -> | \"control: { sectionchange }\" | CTRL_TODOS subgraph User navigates via browser NAV_USER_HASH > Browser Address Bar ] end subgraph User navigates via UI components NAV_STUDENT_IN > Student Selector ] NAV_SECTION_IN > Section Selector ] CTRL_MAIN_NAV ( \" Dashboard Controller < code > < li > onStudentSelectorSelect </ li > < li > onStudentSelectorClear </ li > < li > onSectionSelectorSelect </ li > < li > onSectionSelectorClear </ li > </ code > \") NAV_STUDENT_IN - . -> | select | CTRL_MAIN_NAV NAV_STUDENT_IN - . -> | clear | CTRL_MAIN_NAV NAV_SECTION_IN - . -> | select | CTRL_MAIN_NAV NAV_SECTION_IN - . -> | clear | CTRL_MAIN_NAV CTRL_MAIN_NAV --> | \"redirectTo(...)\" | NAV_ROUTER_HASH end subgraph Route parameters applied to top - level view state NAV_ROUTER_HASH > Browser Address Bar ] ROUTER ( Ext . app . route . Router ) CTRL_DASH_ROUTER ( \" Dashboard Controller < code > < li > showDashboard ( studentUsername , sectionCode ) </ li > </ code > \") ROUTER --> | \"routes: { ':studentUsername/:sectionCode' }\" | CTRL_DASH_ROUTER end subgraph New state propagates throughout application CTRL_TASKS ( \" Tasks Controller < code > < li > onStudentChange </ li > < li > onSectionChange </ li > </ code > \") CTRL_TODOS ( \" Todos Controller < code > < li > onStudentChange </ li > < li > onSectionChange </ li > </ code > \") STORE_TASKS (( Tasks Store )) STORE_TODOS (( Todos Store )) VIEW_TASKS [ Tasks View ] VIEW_TODOS [ Todos View ] CTRL_TASKS --> | \"setReadOnly(...)\" | VIEW_TASKS CTRL_TASKS --> | \"setStudent(...)\" | STORE_TASKS CTRL_TASKS --> | \"setSection(...)\" | STORE_TASKS CTRL_TODOS --> | \"setReadOnly(...)\" | VIEW_TODOS CTRL_TODOS --> | \"setStudent(...)\" | STORE_TODOS CTRL_TODOS --> | \"setSection(...)\" | STORE_TODOS STORE_TASKS - . -> | data events | VIEW_TASKS STORE_TODOS - . -> | data events | VIEW_TODOS VIEW_TASKS - . -> | User Intents | CTRL_TASKS VIEW_TODOS - . -> | User Intents | CTRL_TODOS end subgraph New state reflected back to all navigation UI CTRL_DASH_CHANGE ( \" Dashboard Controller < code > < li > onStudentChange </ li > < li > onSectionChange </ li > </ code > \") NAV_STUDENT_OUT > Student Selector ] NAV_SECTION_OUT > Section Selector ] CTRL_DASH_CHANGE --> | \"setValue(...)\" | NAV_STUDENT_OUT CTRL_DASH_CHANGE --> | \"setValue(...)\" | NAV_SECTION_OUT end ```","title":"State flow"},{"location":"legacy-docs/user_interfaces/tasks/teachers/","text":"Teacher Task Dashboard \u00b6 Create a Task \u00b6 Teachers can create a task in the teacher task interface. Optionally, creators of tasks can add them to the task database for future use by others by selecting a check box in the task creation window. Assign a Task \u00b6 Assigning a task is done by student with the option in the UI to assign to the current roster of a section. If a student is added to section after the task has been assigned, that task is not automaically assigned to them and the teacher must select the blank cell in the grid and assign it to that student by hand. In the Title bar, previous tasks are searchable by name and show the date created as well as the creator After selecting an existing task, teachers can override the details of that task for a given section without editing the task in the task database. Evaluate a Task \u00b6 Teachers can evaluate a task at any time (even if not yet submitted by students) The interface indicates when a student has submitted or resubmitted a task and whether it is one time or late Status of a Task \u00b6 The following states are possible and visually distinct in the interface Not Assigned Due Needs Rated Completed Revision Assigned Revision Needs Rated Past Due Late Needs Rated","title":"Teacher Task Dashboard"},{"location":"legacy-docs/user_interfaces/tasks/teachers/#teacher-task-dashboard","text":"","title":"Teacher Task Dashboard"},{"location":"legacy-docs/user_interfaces/tasks/teachers/#create-a-task","text":"Teachers can create a task in the teacher task interface. Optionally, creators of tasks can add them to the task database for future use by others by selecting a check box in the task creation window.","title":"Create a Task"},{"location":"legacy-docs/user_interfaces/tasks/teachers/#assign-a-task","text":"Assigning a task is done by student with the option in the UI to assign to the current roster of a section. If a student is added to section after the task has been assigned, that task is not automaically assigned to them and the teacher must select the blank cell in the grid and assign it to that student by hand. In the Title bar, previous tasks are searchable by name and show the date created as well as the creator After selecting an existing task, teachers can override the details of that task for a given section without editing the task in the task database.","title":"Assign a Task"},{"location":"legacy-docs/user_interfaces/tasks/teachers/#evaluate-a-task","text":"Teachers can evaluate a task at any time (even if not yet submitted by students) The interface indicates when a student has submitted or resubmitted a task and whether it is one time or late","title":"Evaluate a Task"},{"location":"legacy-docs/user_interfaces/tasks/teachers/#status-of-a-task","text":"The following states are possible and visually distinct in the interface Not Assigned Due Needs Rated Completed Revision Assigned Revision Needs Rated Past Due Late Needs Rated","title":"Status of a Task"},{"location":"operations/","text":"Operations \u00b6 The Operations section provides content covering: Overviews of the physical infrastructure and service components Building hosted environments Maintaining hosted environments Backing up and restoring content Monitoring system health","title":"Operations"},{"location":"operations/#operations","text":"The Operations section provides content covering: Overviews of the physical infrastructure and service components Building hosted environments Maintaining hosted environments Backing up and restoring content Monitoring system health","title":"Operations"},{"location":"operations/data-loading/contacts-spreadsheet/","text":"Contacts Spreadsheet \u00b6 Initialize git branch \u00b6 Initialize a new git repository if needed, or just cd into an existing one: git init myschool-slate cd myschool-slate Then check out a fresh branch to track content import content: git checkout --orphan gitsheets/imports/contacts Declare a new gitsheet to store contact data by creating this file: .gitsheets/student-contacts.toml [gitsheet] root = \"student-contacts\" path = \"${{ student.username }}\" [gitsheet.fields.student] default = {} Finally, stage and commit the gitsheet declaration: git add .gitsheets/student-contacts.toml git commit -m \"feat: define student-contacts gitsheet\" Spreadsheet template \u00b6 Populate this template with student and relationship contact details: student.name,student.username,student.number,student.email.personal,student.phone.home,student.phone.mobile,guardian1.name,guardian1.relationship,guardian1.email.personal,guardian1.phone.home,guardian1.phone.mobile,guardian1.phone.work,guardian2.name,guardian2.relationship,guardian2.email.personal,guardian2.phone.home,guardian2.phone.mobile,guardian2.phone.work John Doe,johndoe7,,johndoe7@gmail.com,,267-111-1234,Michael Doe,Father,michaeldoe7@gmail.com,,267-222-1234,394-231-3245,Jane Doe,Mother,janedoe7@gmail.com,,267-384-2835,325-234-3818 Load spreadsheet into gitsheet \u00b6 Use the git sheet upsert command to load the filled CSV from the previous template: git sheet upsert \\ --delete-missing \\ \"student-contacts\" \\ ~/Downloads/myschool_contacts.csv And then commit the resulting staged records: git commit -m \"data: load student contacts from spreadsheet\" Review relationship labels \u00b6 Use this command to analyze all the relationship labels used in this dataset: git sheet query student-contacts \\ | jq '[ .[].guardian1.relationship, .[].guardian2.relationship ] | unique' If any strange values or abbreviations are present, consider using find/replace on the original spreadsheet to normalize this with some more standard values, and then repeat the load step above to add a commit with your changes. Extract data from Slate instance into gitsheet \u00b6 Install the slate-gitsheets command if needed: npm install -g slate-gitsheets Download users from Slate into another branch: slate-gitsheets extract-slate \\ --ref = gitsheets/slate \\ --host = https://myschool.org/ \\ --host-name = myschool Merge spreadsheet data into Slate data \u00b6 Merge data from the student-contacts gitsheet into the Slate users gitsheet: slate-gitsheets merge-contacts \\ --contacts-ref = gitsheets/imports/contacts \\ --slate-ref = gitsheets/slate Load data from gitsheets into Slate instance \u00b6 slate-gitsheets load-slate \\ --ref = gitsheets/slate \\ --host = https://myschool.org/ \\ --host-name = myschool","title":"Contacts Spreadsheet"},{"location":"operations/data-loading/contacts-spreadsheet/#contacts-spreadsheet","text":"","title":"Contacts Spreadsheet"},{"location":"operations/data-loading/contacts-spreadsheet/#initialize-git-branch","text":"Initialize a new git repository if needed, or just cd into an existing one: git init myschool-slate cd myschool-slate Then check out a fresh branch to track content import content: git checkout --orphan gitsheets/imports/contacts Declare a new gitsheet to store contact data by creating this file: .gitsheets/student-contacts.toml [gitsheet] root = \"student-contacts\" path = \"${{ student.username }}\" [gitsheet.fields.student] default = {} Finally, stage and commit the gitsheet declaration: git add .gitsheets/student-contacts.toml git commit -m \"feat: define student-contacts gitsheet\"","title":"Initialize git branch"},{"location":"operations/data-loading/contacts-spreadsheet/#spreadsheet-template","text":"Populate this template with student and relationship contact details: student.name,student.username,student.number,student.email.personal,student.phone.home,student.phone.mobile,guardian1.name,guardian1.relationship,guardian1.email.personal,guardian1.phone.home,guardian1.phone.mobile,guardian1.phone.work,guardian2.name,guardian2.relationship,guardian2.email.personal,guardian2.phone.home,guardian2.phone.mobile,guardian2.phone.work John Doe,johndoe7,,johndoe7@gmail.com,,267-111-1234,Michael Doe,Father,michaeldoe7@gmail.com,,267-222-1234,394-231-3245,Jane Doe,Mother,janedoe7@gmail.com,,267-384-2835,325-234-3818","title":"Spreadsheet template"},{"location":"operations/data-loading/contacts-spreadsheet/#load-spreadsheet-into-gitsheet","text":"Use the git sheet upsert command to load the filled CSV from the previous template: git sheet upsert \\ --delete-missing \\ \"student-contacts\" \\ ~/Downloads/myschool_contacts.csv And then commit the resulting staged records: git commit -m \"data: load student contacts from spreadsheet\"","title":"Load spreadsheet into gitsheet"},{"location":"operations/data-loading/contacts-spreadsheet/#review-relationship-labels","text":"Use this command to analyze all the relationship labels used in this dataset: git sheet query student-contacts \\ | jq '[ .[].guardian1.relationship, .[].guardian2.relationship ] | unique' If any strange values or abbreviations are present, consider using find/replace on the original spreadsheet to normalize this with some more standard values, and then repeat the load step above to add a commit with your changes.","title":"Review relationship labels"},{"location":"operations/data-loading/contacts-spreadsheet/#extract-data-from-slate-instance-into-gitsheet","text":"Install the slate-gitsheets command if needed: npm install -g slate-gitsheets Download users from Slate into another branch: slate-gitsheets extract-slate \\ --ref = gitsheets/slate \\ --host = https://myschool.org/ \\ --host-name = myschool","title":"Extract data from Slate instance into gitsheet"},{"location":"operations/data-loading/contacts-spreadsheet/#merge-spreadsheet-data-into-slate-data","text":"Merge data from the student-contacts gitsheet into the Slate users gitsheet: slate-gitsheets merge-contacts \\ --contacts-ref = gitsheets/imports/contacts \\ --slate-ref = gitsheets/slate","title":"Merge spreadsheet data into Slate data"},{"location":"operations/data-loading/contacts-spreadsheet/#load-data-from-gitsheets-into-slate-instance","text":"slate-gitsheets load-slate \\ --ref = gitsheets/slate \\ --host = https://myschool.org/ \\ --host-name = myschool","title":"Load data from gitsheets into Slate instance"},{"location":"operations/data-management/name-change/","text":"Name changes \u00b6 If a person\u2019s name needs to be changed, their First Name , Last Name , and Preferred [First] Name fields can be edited by any staff user from the /manage interface. Username can be edited there as well if desired. Propogating to Google Workspace \u00b6 When Slate is used to synchronize a school\u2019s Google Workspace, a name and/or email address change made in Slate should be propogated to Google Workspace by Slate. After making changes to name or username fields, open a user\u2019s Contacts tab under the /manage interface and edit their school email to match the new desired email address if it is to be updated as well. A user\u2019s desired Google Workspace email is set by whatever email address @ the school\u2019s Google Workspace domain is set for them, and for any user created by Slate or previously found in a sync by Slate, changes to this desired email address will be detected and applied to Google. Visit /connectors/gsuite and use Pretend mode first to confirm that the desired changes are to be applied correctly, and then run the synchronization again with Pretend mode turned off to apply the changes. When a user\u2019s email address in the Google Workspace gets updated, the previous one is automatically left on the account as an alias so emails sent to the previous email address will continue to be delivered. This is standard behavior for Google Workspace. If this is not desired, have a Google Workspace administrator look up the user in the Google Workspace admin console and manually delete the alias after the rename is synchronized. Propogating to Canvas \u00b6 When Slate is used to synchronize a school\u2019s Canvas instance, a name and/or email address change made in Slate should be propogated to Canvas by Slate. After making any desired changes to name and/or email, ensure the changes are synchronized first with Google Workspace if applicable. Otherwise, make sure any new email address is deliverable before synchronizing Canvas to use it. Visit /connectors/canvas and use Pretend mode first to confirm that th edesired changes are to be applied correctly with Push Users enabled, and then run the synchronization again with Pretend mode turned off to apply the changes.","title":"Name changes"},{"location":"operations/data-management/name-change/#name-changes","text":"If a person\u2019s name needs to be changed, their First Name , Last Name , and Preferred [First] Name fields can be edited by any staff user from the /manage interface. Username can be edited there as well if desired.","title":"Name changes"},{"location":"operations/data-management/name-change/#propogating-to-google-workspace","text":"When Slate is used to synchronize a school\u2019s Google Workspace, a name and/or email address change made in Slate should be propogated to Google Workspace by Slate. After making changes to name or username fields, open a user\u2019s Contacts tab under the /manage interface and edit their school email to match the new desired email address if it is to be updated as well. A user\u2019s desired Google Workspace email is set by whatever email address @ the school\u2019s Google Workspace domain is set for them, and for any user created by Slate or previously found in a sync by Slate, changes to this desired email address will be detected and applied to Google. Visit /connectors/gsuite and use Pretend mode first to confirm that the desired changes are to be applied correctly, and then run the synchronization again with Pretend mode turned off to apply the changes. When a user\u2019s email address in the Google Workspace gets updated, the previous one is automatically left on the account as an alias so emails sent to the previous email address will continue to be delivered. This is standard behavior for Google Workspace. If this is not desired, have a Google Workspace administrator look up the user in the Google Workspace admin console and manually delete the alias after the rename is synchronized.","title":"Propogating to Google Workspace"},{"location":"operations/data-management/name-change/#propogating-to-canvas","text":"When Slate is used to synchronize a school\u2019s Canvas instance, a name and/or email address change made in Slate should be propogated to Canvas by Slate. After making any desired changes to name and/or email, ensure the changes are synchronized first with Google Workspace if applicable. Otherwise, make sure any new email address is deliverable before synchronizing Canvas to use it. Visit /connectors/canvas and use Pretend mode first to confirm that th edesired changes are to be applied correctly with Push Users enabled, and then run the synchronization again with Pretend mode turned off to apply the changes.","title":"Propogating to Canvas"},{"location":"usage/","text":"Usage \u00b6 The Usage section provides content covering: Overviews of the system features Setting up and customizing a user account Using the system\u2019s features for day-to-day work Reporting and integration","title":"Usage"},{"location":"usage/#usage","text":"The Usage section provides content covering: Overviews of the system features Setting up and customizing a user account Using the system\u2019s features for day-to-day work Reporting and integration","title":"Usage"}]}