Ext.data.JsonP.bdd_conventions({"guide":"<h2 id='bdd_conventions-section-intro'>Intro</h2>\n<div class='toc'>\n<p><strong>Contents</strong></p>\n<ol>\n<li><a href='#!/guide/bdd_conventions-section-intro'>Intro</a></li>\n<li><a href='#!/guide/bdd_conventions-section-test-suites-and-specs'>Test suites and specs</a></li>\n<li><a href='#!/guide/bdd_conventions-section-expectations'>Expectations</a></li>\n<li><a href='#!/guide/bdd_conventions-section-under-the-hood'>Under the hood</a></li>\n<li><a href='#!/guide/bdd_conventions-section-execution-order'>Execution order</a></li>\n<li><a href='#!/guide/bdd_conventions-section-buy-this-product'>Buy this product</a></li>\n<li><a href='#!/guide/bdd_conventions-section-support'>Support</a></li>\n<li><a href='#!/guide/bdd_conventions-section-see-also'>See also</a></li>\n<li><a href='#!/guide/bdd_conventions-section-attribution'>Attribution</a></li>\n<li><a href='#!/guide/bdd_conventions-section-copyright-and-license'>COPYRIGHT AND LICENSE</a></li>\n</ol>\n</div>\n\n<p>BDD style testing focuses on making tests readable, which results in the test suite becoming a bit like a readable documentation.</p>\n\n<p>Siesta allows you to write tests in BDD notation or in plain code. Keep in mind though,\nthat not every test, especially ones involving user interactions can be cleanly expressed in BDD statements.\nIf you find yourself confused what BDD construct to use - just fallback to\n\"normal\" free-form testing.</p>\n\n<h2 id='bdd_conventions-section-test-suites-and-specs'>Test suites and specs</h2>\n\n<p>In BDD terms, a <em>test suite</em> is a function containing test <em>specs</em> or other suites.\nA test suite can be started with <a href=\"#!/api/Siesta.Test-method-describe\" rel=\"Siesta.Test-method-describe\" class=\"docClass\">describe</a> method:</p>\n\n<pre><code>StartTest(function (t) {\n    t.describe(\"My system\", function (t) {\n        ...\n    })\n})\n</code></pre>\n\n<p>A test <em>spec</em> is also a function, containing other test <em>specs</em> or suites.\nIt can be started with the <a href=\"#!/api/Siesta.Test-method-it\" rel=\"Siesta.Test-method-it\" class=\"docClass\">it</a> function.</p>\n\n<pre><code>StartTest(function (t) {\n    t.describe(\"My system\", function (t) {\n        t.it(\"Should allow user to log in\", function (t) {\n            ...\n        })\n\n        t.describe(\"Report engine of my system\", function (t) {\n            t.it(\"Should allow generate reports in PDF\", function (t) {\n                ...\n            })\n        })\n    })\n})\n</code></pre>\n\n<p><strong> Every test suite or test spec function receives a new test instance as the 1st argument.\nAll further method calls should use this newly provided instance.</strong></p>\n\n<p>Test suites and test specs can be nested arbitrarily.</p>\n\n<p>Please do not confuse the BDD term \"test suite\" with the \"test suite\" term used in\nother places of this documentation. The latter means \"all tests in all files, that\nyou have for your system\".</p>\n\n<h2 id='bdd_conventions-section-expectations'>Expectations</h2>\n\n<p>Assertions in BDD testing are called <em>expectations</em> or, sometimes, \"matchers\". They should\nreside inside the test specs and can be created with the <a href=\"#!/api/Siesta.Test-method-expect\" rel=\"Siesta.Test-method-expect\" class=\"docClass\">expect</a> method.</p>\n\n<pre><code>StartTest(function (t) {\n    t.describe(\"My system\", function (t) {\n        t.it(\"Should allow user to log in\", function (t) {\n            t.expect(MyApp.LoginManager.isLoggedIn()).toBe(false)\n\n            MyApp.LoginManager.login()\n\n            t.expect(MyApp.LoginManager.isLoggedIn()).toBe(true)\n        })\n\n        t.describe(\"Report engine of my system\", function (t) {\n            t.it(\"Should allow generate reports in PDF\", function (t) {\n                ...\n            })\n        })\n    })\n})\n</code></pre>\n\n<p>Please refer to the <a href=\"#!/api/Siesta.Test.BDD.Expectation\" rel=\"Siesta.Test.BDD.Expectation\" class=\"docClass\">Siesta.Test.BDD.Expectation</a> for the list of supported expectations.</p>\n\n<h3 id='bdd_conventions-section-spies'>Spies</h3>\n\n<p>Siesta implements spies with the same functionality and syntax as seen in Jasmine along with small improvements.\nOne can spy on a function property of some object or create a standalone spy, suitable for event listener or similar.</p>\n\n<pre><code>StartTest(function (t) {\n    ...\n\n    var spy = t.spyOn(obj, 'process')\n    // or, if you need to call the original 'process' method\n    var spy = t.spyOn(obj, 'process').and.callThrough()\n\n    // call the method\n    obj.process('fast', 1)\n\n    t.expect(spy).toHaveBeenCalled();\n    t.expect(spy).toHaveBeenCalledWith('fast', 1);\n})\n</code></pre>\n\n<p>Please refer to the <a href=\"#!/api/Siesta.Test.BDD-method-spyOn\" rel=\"Siesta.Test.BDD-method-spyOn\" class=\"docClass\">Siesta.Test.BDD.spyOn</a> method and <a href=\"#!/api/Siesta.Test.BDD.Spy\" rel=\"Siesta.Test.BDD.Spy\" class=\"docClass\">Siesta.Test.BDD.Spy</a> class.</p>\n\n<h2 id='bdd_conventions-section-under-the-hood'>Under the hood</h2>\n\n<p>Internally, test specs and test suites are regular Siesta sub-tests, created with the <a href=\"#!/api/Siesta.Test-method-getSubTest\" rel=\"Siesta.Test-method-getSubTest\" class=\"docClass\">Siesta.Test.getSubTest</a> method.\nAny regular Siesta assertion or method of the test class can be used inside of a test or spec, including asynchronous methods like <a href=\"#!/api/Siesta.Test-method-chain\" rel=\"Siesta.Test-method-chain\" class=\"docClass\">Siesta.Test.chain</a> or <a href=\"#!/api/Siesta.Test-method-beginAsync\" rel=\"Siesta.Test-method-beginAsync\" class=\"docClass\">Siesta.Test.beginAsync</a>.</p>\n\n<h2 id='bdd_conventions-section-execution-order'>Execution order</h2>\n\n<p>Test suites and specs are executed in the order they are declared. Note, that they are not started right away - first, the whole containing\nblock is executed:</p>\n\n<pre><code>StartTest(function (t) {\n    var a = 1;\n\n    t.describe(\"Something\", function (t) {\n        // \"a\" is \"3\" here\n        var b = 1;\n\n        t.it(\"Should do this\", function (t) {\n            // \"b\" is \"3\" here\n        });\n\n        b = 2;\n\n        t.it(\"Should do this\", function (t) {\n        });\n\n        b = 3;\n    })\n\n    a = 2;\n\n    t.describe(\"Something\", function (t) {\n        t.it(\"Should do this\", function (t) {\n        });\n\n        t.it(\"Should do this\", function (t) {\n        });\n    })\n    a = 3;\n});\n</code></pre>\n\n<p>The following suite/spec starts its execution only <strong>after the previous one completes</strong>. This includes any delays caused by\ntesting asynchronous code. For example:</p>\n\n<pre><code>StartTest(function (t) {\n    t.describe(\"Something\", function (t) {\n        // this spec will be considered completed only after the inner `waitFor` method\n        // will complete it waiting\n        t.it(\"Should do this\", function (t) {\n            t.waitFor(300, function () {\n                ...\n            });\n        });\n\n        // this spec will start only after previous - including waiting from `waitFor` method\n        // in turn, this spec will be considered completed only after matching `endAsync` call\n        t.it(\"Should do this\", function (t) {\n            var async = t.beginAsync();\n            ...\n        });\n    });\n});\n</code></pre>\n\n<p>Also, a test suite or spec will wait for of all its child suite/specs to complete before its considered complete as a whole.</p>\n\n<h2 id='bdd_conventions-section-buy-this-product'>Buy this product</h2>\n\n<p>Visit our store: <a href=\"http://bryntum.com/store/siesta\">http://bryntum.com/store/siesta</a></p>\n\n<h2 id='bdd_conventions-section-support'>Support</h2>\n\n<p>Ask a question in our community forum: <a href=\"http://www.bryntum.com/forum/viewforum.php?f=20\">http://www.bryntum.com/forum/viewforum.php?f=20</a></p>\n\n<p>Share your experience in our IRC channel: <a href=\"http://webchat.freenode.net/?randomnick=1&amp;channels=bryntum&amp;prompt=1\">#bryntum</a></p>\n\n<p>Please report any bugs through the web interface at <a href=\"https://www.assembla.com/spaces/bryntum/support/tickets\">https://www.assembla.com/spaces/bryntum/support/tickets</a></p>\n\n<h2 id='bdd_conventions-section-see-also'>See also</h2>\n\n<p>Web page of this product: <a href=\"http://bryntum.com/products/siesta\">http://bryntum.com/products/siesta</a></p>\n\n<p>Other Bryntum products: <a href=\"http://bryntum.com/products\">http://bryntum.com/products</a></p>\n\n<h2 id='bdd_conventions-section-attribution'>Attribution</h2>\n\n<p>This software contains icons from the following icon packs (licensed under Creative Common 2.5/3.0 Attribution licenses)</p>\n\n<ul>\n<li><a href=\"http://www.famfamfam.com/lab/icons/silk/\">http://www.famfamfam.com/lab/icons/silk/</a></li>\n<li><a href=\"http://led24.de/iconset/\">http://led24.de/iconset/</a></li>\n<li><a href=\"http://p.yusukekamiyamane.com/\">http://p.yusukekamiyamane.com/</a></li>\n<li><a href=\"http://rrze-icon-set.berlios.de/index.html\">http://rrze-icon-set.berlios.de/index.html</a></li>\n<li><a href=\"http://www.smashingmagazine.com/2009/05/20/flavour-extended-the-ultimate-icon-set-for-web-designers/\">http://www.smashingmagazine.com/2009/05/20/flavour-extended-the-ultimate-icon-set-for-web-designers/</a></li>\n<li><a href=\"http://www.doublejdesign.co.uk/products-page/icons/super-mono-icons/\">http://www.doublejdesign.co.uk/products-page/icons/super-mono-icons/</a></li>\n<li><a href=\"http://pixel-mixer.com/\">http://pixel-mixer.com/</a></li>\n</ul>\n\n\n<p>Thanks a lot to the authors of the respective icons packs.</p>\n\n<h2 id='bdd_conventions-section-copyright-and-license'>COPYRIGHT AND LICENSE</h2>\n\n<p>Copyright (c) 2009-2015, Bryntum &amp; Nickolay Platonov</p>\n\n<p>All rights reserved.</p>\n","title":"BDD conventions"});