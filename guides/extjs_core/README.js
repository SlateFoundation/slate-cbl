Ext.data.JsonP.extjs_core({"guide":"<h1 id='extjs_core-section-ext-js%3A-the-core'>Ext JS: The Core</h1>\n<div class='toc'>\n<p><strong>Contents</strong></p>\n<ol>\n<li><a href='#!/guide/extjs_core-section-loading-the-core'>Loading the Core</a></li>\n<li><a href='#!/guide/extjs_core-section-included-in-the-core'>Included in the Core</a></li>\n<li><a href='#!/guide/extjs_core-section-defining-and-using-classes'>Defining and Using Classes</a></li>\n<li><a href='#!/guide/extjs_core-section-configuring-the-loader'>Configuring the Loader</a></li>\n</ol>\n</div>\n\n<p>The \"core\" of Ext JS is the bare minimum set of JavaScript code you need to load into your page before you start using the\nframework. The UI toolkits commonly associated with Ext JS are not part of the core, but can be incrementally loaded on\ntop of it. The core provides a foundation comperable to frameworks like jQuery, but with an added emphasis on enabling\nthe creation of reusable and integratable JavaScript code and UI components.</p>\n\n<h2 id='extjs_core-section-loading-the-core'>Loading the Core</h2>\n\n<p>The bare minimum you need to load into your page to use Ext JS is <code>build/ext-debug.js</code> or it's minified\nform <code>build/ext.js</code> from the framework's distribution archive. These includes all sources from the framework\n\"tagged\" with <code>// @tag core</code> or <code>// @tag class</code>.</p>\n\n<p>The other stock builds available in the archive include various themes and bundles of UI components on top of the\ncore that are useful if you want to use those higher-level components without doing any custom builds or configuring the loader.</p>\n\n<p>The <a href=\"../eg-iframe.html\">HTML template</a> powering all the inline examples in these docs loads the Ext JS core JavaScript build\nfrom Sencha's CDN:</p>\n\n<pre><code>&lt;script type=\"text/javascript\" src=\"https://cdn.sencha.com/ext/commercial/6.0.0/build/ext-all-debug.js\"&gt;&lt;/script&gt;\n</code></pre>\n\n<p>That HTML template <em>also</em> loads a stock build of the <code>triton</code> theme for the <code>classic</code> UI toolkit, but that is only needed to\nprovide styling for later guides that get into using components from the UI toolkits. UI toolkit classes can be loaded by the\ncore builds but none are included in them, and having a theme loaded is not a requirement for using any of the core JavaScript\nlibrary described in this guide.</p>\n\n<p>To verify that the core is loaded, query <code>Ext.getVersion('core')</code> in your console or via a JavaScript snippet in your page:</p>\n\n<pre class='inline-example '><code>alert('Ext JS version: ' + Ext.getVersion('core').toString());\n</code></pre>\n\n<h2 id='extjs_core-section-included-in-the-core'>Included in the Core</h2>\n\n<ul>\n<li>A manifest of all Ext.* classes for easy loading</li>\n<li><code>Ext.Boot</code>: An undocumented low-level internal component of the framework that provides for basic\nasset loading and platform detection</li>\n<li><code>Ext.Logger</code>: Provides safe <code>log</code>/<code>verbose</code>/<code>info</code>/<code>warn</code>/<code>error</code>/<code>deprecate</code> methods that by default\njust wrap around <code>window.console</code> but can be easily hooked into or replaced with more complicated\nimplementations in different environments</li>\n<li><a href=\"http://docs.sencha.com/extjs/6.0/6.0.0-classic/#!/api/Ext\"><code>Ext</code>*</a>: The root class of the framework\nprovides a grab-bag of core methods and properties</li>\n<li><a href=\"http://docs.sencha.com/extjs/6.0/6.0.0-classic/#!/api/Ext.Error\"><code>Ext.Error</code>*</a>: A helpful wrapper around\nJavaScript's underlying <code>Error</code> object</li>\n<li><a href=\"http://docs.sencha.com/extjs/6.0/6.0.0-classic/#!/api/Ext.Assert\"><code>Ext.Assert</code>*</a>: An assertion toolkit\nfor embedding diagnostics within your code</li>\n<li><a href=\"http://docs.sencha.com/extjs/6.0/6.0.0-classic/#!/api/Ext.Version\"><code>Ext.Version</code>*</a>: A class for working\nwith <a href=\"http://semver.org\">semantic version numbers</a></li>\n<li>Useful static methods for working with all the core JavaScript types:\n\n<ul>\n<li><a href=\"http://docs.sencha.com/extjs/6.0/6.0.0-classic/#!/api/Ext.Array\"><code>Ext.Array</code>*</a></li>\n<li><a href=\"http://docs.sencha.com/extjs/6.0/6.0.0-classic/#!/api/Ext.String\"><code>Ext.String</code>*</a></li>\n<li><a href=\"http://docs.sencha.com/extjs/6.0/6.0.0-classic/#!/api/Ext.Date\"><code>Ext.Date</code>*</a></li>\n<li><a href=\"http://docs.sencha.com/extjs/6.0/6.0.0-classic/#!/api/Ext.Function\"><code>Ext.Function</code>*</a></li>\n<li><a href=\"http://docs.sencha.com/extjs/6.0/6.0.0-classic/#!/api/Ext.Number\"><code>Ext.Number</code>*</a></li>\n<li><a href=\"http://docs.sencha.com/extjs/6.0/6.0.0-classic/#!/api/Ext.Object\"><code>Ext.Object</code>*</a></li>\n</ul>\n</li>\n<li>The foundation for Ext JS' <a href=\"http://docs.sencha.com/extjs/6.0/core_concepts/classes.html\">class system</a>\n\n<ul>\n<li><a href=\"http://docs.sencha.com/extjs/6.0/6.0.0-classic/#!/api/Ext.Config\"><code>Ext.Config</code></a>: Manages <code>config</code> properties for classes and\ntheir workflows</li>\n<li><a href=\"http://docs.sencha.com/extjs/6.0/6.0.0-classic/#!/api/Ext.Base\"><code>Ext.Base</code></a>: The root prototype of all Ext JS-defined\nJavaScript classes</li>\n<li><a href=\"http://docs.sencha.com/extjs/6.0/6.0.0-classic/#!/api/Ext.Class\"><code>Ext.Class</code></a>: The low-level factory for setting up\nExt JS JavaScript classes</li>\n<li><a href=\"http://docs.sencha.com/extjs/6.0/6.0.0-classic/#!/api/Ext.ClassManager\"><code>Ext.ClassManager</code>*</a>: Provides the high-level API\nfor keeping track of and working with classes</li>\n</ul>\n</li>\n<li><a href=\"http://docs.sencha.com/extjs/6.0/6.0.0-classic/#!/api/Ext.browser\"><code>Ext.browser</code>*</a>: As instance of the <code>Ext.env.Browser</code> class\nproviding information about the current browser</li>\n<li><a href=\"http://docs.sencha.com/extjs/6.0/6.0.0-classic/#!/api/Ext.os\"><code>Ext.os</code>*</a>: As instance of the <code>Ext.env.OS</code> class providing\ninformation about the current operating system</li>\n<li><a href=\"http://docs.sencha.com/extjs/6.0/6.0.0-classic/#!/api/Ext.feature\"><code>Ext.feature</code>*</a> / <a href=\"http://docs.sencha.com/extjs/6.0/6.0.0-classic/#!/api/Ext.feature\"><code>Ext.supports</code>*</a>:\nA collection of feature/bug detectors and API for testing them</li>\n<li><a href=\"http://docs.sencha.com/extjs/6.0/6.0.0-classic/#!/api/Ext.Loader\"><code>Ext.Loader</code>*</a>: A highly configurable\nclass that provides for dynamic loading of JavaScript classes</li>\n<li><a href=\"http://docs.sencha.com/extjs/6.0/6.0.0-classic/#!/api/Ext-method-onReady\"><code>Ext.onReady(function)</code></a>: Method for registering functions to run after\nboth the browser's \"dom ready\" event has fired and after <code>Ext.Loader</code> has finished loading all already-<code>require</code>d classes</li>\n<li><a href=\"http://docs.sencha.com/extjs/6.0/6.0.0-classic/#!/api/Ext-method-application\"><code>Ext.application(config)</code>*</a>: A factory method for defining an\nMVC application and loading all it's requirements</li>\n</ul>\n\n\n<p><em>Classes marked with <strong>*</strong> have thorough documentation worth reviewing</em></p>\n\n<h2 id='extjs_core-section-defining-and-using-classes'>Defining and Using Classes</h2>\n\n<h3 id='extjs_core-section-example-1%3A-ext.require-with-callback'>Example 1: Ext.require with callback</h3>\n\n<h3 id='extjs_core-section-example-2%3A-ext.require-%2B-ext.onready'>Example 2: Ext.require + Ext.onReady</h3>\n\n<h3 id='extjs_core-section-example-3%3A-singleton-with-constructor'>Example 3: Singleton with constructor</h3>\n\n<h2 id='extjs_core-section-configuring-the-loader'>Configuring the Loader</h2>\n","title":"The Core"});